/**
 * generated by Xtext 2.27.0-SNAPSHOT
 */
package org.xtext.example.mydsl.vaselina.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.vaselina.AbstractMethodCall;
import org.xtext.example.mydsl.vaselina.And;
import org.xtext.example.mydsl.vaselina.BodyStatement;
import org.xtext.example.mydsl.vaselina.BrkStr;
import org.xtext.example.mydsl.vaselina.Comparison;
import org.xtext.example.mydsl.vaselina.DOUBLE;
import org.xtext.example.mydsl.vaselina.DoWhileExpression;
import org.xtext.example.mydsl.vaselina.Equality;
import org.xtext.example.mydsl.vaselina.FuncCall;
import org.xtext.example.mydsl.vaselina.FuncDefinition;
import org.xtext.example.mydsl.vaselina.FuncParameter;
import org.xtext.example.mydsl.vaselina.IfExpression;
import org.xtext.example.mydsl.vaselina.Inside;
import org.xtext.example.mydsl.vaselina.MulOrDiv;
import org.xtext.example.mydsl.vaselina.Not;
import org.xtext.example.mydsl.vaselina.Or;
import org.xtext.example.mydsl.vaselina.PlusOrMinus;
import org.xtext.example.mydsl.vaselina.ReturnDeclaration;
import org.xtext.example.mydsl.vaselina.StdFunction;
import org.xtext.example.mydsl.vaselina.StringRef;
import org.xtext.example.mydsl.vaselina.Variable;
import org.xtext.example.mydsl.vaselina.VaselinaFactory;
import org.xtext.example.mydsl.vaselina.VaselinaPackage;
import org.xtext.example.mydsl.vaselina.VaselinaProgram;
import org.xtext.example.mydsl.vaselina.arrayDimension;
import org.xtext.example.mydsl.vaselina.arrayRef;
import org.xtext.example.mydsl.vaselina.arrayRefs;
import org.xtext.example.mydsl.vaselina.boolRef;
import org.xtext.example.mydsl.vaselina.doubleRef;
import org.xtext.example.mydsl.vaselina.mainDeclared;
import org.xtext.example.mydsl.vaselina.numRef;
import org.xtext.example.mydsl.vaselina.varAssignment;
import org.xtext.example.mydsl.vaselina.varDeclared;
import org.xtext.example.mydsl.vaselina.varExpression;
import org.xtext.example.mydsl.vaselina.varRef;
import org.xtext.example.mydsl.vaselina.varRefs;
import org.xtext.example.mydsl.vaselina.varReturn;
import org.xtext.example.mydsl.vaselina.varSymbol;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class VaselinaFactoryImpl extends EFactoryImpl implements VaselinaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static VaselinaFactory init()
  {
    try
    {
      VaselinaFactory theVaselinaFactory = (VaselinaFactory)EPackage.Registry.INSTANCE.getEFactory(VaselinaPackage.eNS_URI);
      if (theVaselinaFactory != null)
      {
        return theVaselinaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new VaselinaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VaselinaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case VaselinaPackage.VASELINA_PROGRAM: return createVaselinaProgram();
      case VaselinaPackage.MAIN_DECLARED: return createmainDeclared();
      case VaselinaPackage.BODY_STATEMENT: return createBodyStatement();
      case VaselinaPackage.VAR_RETURN: return createvarReturn();
      case VaselinaPackage.VAR_DECLARED: return createvarDeclared();
      case VaselinaPackage.VAR_ASSIGNMENT: return createvarAssignment();
      case VaselinaPackage.VARIABLE: return createVariable();
      case VaselinaPackage.ARRAY_REFS: return createarrayRefs();
      case VaselinaPackage.VAR_REFS: return createvarRefs();
      case VaselinaPackage.VAR_SYMBOL: return createvarSymbol();
      case VaselinaPackage.ARRAY_DIMENSION: return createarrayDimension();
      case VaselinaPackage.FUNC_CALL: return createFuncCall();
      case VaselinaPackage.FUNC_PARAMETER: return createFuncParameter();
      case VaselinaPackage.FUNC_DEFINITION: return createFuncDefinition();
      case VaselinaPackage.ABSTRACT_METHOD_CALL: return createAbstractMethodCall();
      case VaselinaPackage.STD_FUNCTION: return createStdFunction();
      case VaselinaPackage.IF_EXPRESSION: return createIfExpression();
      case VaselinaPackage.DO_WHILE_EXPRESSION: return createDoWhileExpression();
      case VaselinaPackage.BRK_STR: return createBrkStr();
      case VaselinaPackage.RETURN_DECLARATION: return createReturnDeclaration();
      case VaselinaPackage.DOUBLE: return createDOUBLE();
      case VaselinaPackage.VAR_EXPRESSION: return createvarExpression();
      case VaselinaPackage.OR: return createOr();
      case VaselinaPackage.AND: return createAnd();
      case VaselinaPackage.EQUALITY: return createEquality();
      case VaselinaPackage.COMPARISON: return createComparison();
      case VaselinaPackage.PLUS_OR_MINUS: return createPlusOrMinus();
      case VaselinaPackage.MUL_OR_DIV: return createMulOrDiv();
      case VaselinaPackage.MODULE: return createModule();
      case VaselinaPackage.INSIDE: return createInside();
      case VaselinaPackage.NOT: return createNot();
      case VaselinaPackage.STRING_REF: return createStringRef();
      case VaselinaPackage.NUM_REF: return createnumRef();
      case VaselinaPackage.DOUBLE_REF: return createdoubleRef();
      case VaselinaPackage.BOOL_REF: return createboolRef();
      case VaselinaPackage.VAR_REF: return createvarRef();
      case VaselinaPackage.ARRAY_REF: return createarrayRef();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VaselinaProgram createVaselinaProgram()
  {
    VaselinaProgramImpl vaselinaProgram = new VaselinaProgramImpl();
    return vaselinaProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public mainDeclared createmainDeclared()
  {
    mainDeclaredImpl mainDeclared = new mainDeclaredImpl();
    return mainDeclared;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BodyStatement createBodyStatement()
  {
    BodyStatementImpl bodyStatement = new BodyStatementImpl();
    return bodyStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public varReturn createvarReturn()
  {
    varReturnImpl varReturn = new varReturnImpl();
    return varReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public varDeclared createvarDeclared()
  {
    varDeclaredImpl varDeclared = new varDeclaredImpl();
    return varDeclared;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public varAssignment createvarAssignment()
  {
    varAssignmentImpl varAssignment = new varAssignmentImpl();
    return varAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public arrayRefs createarrayRefs()
  {
    arrayRefsImpl arrayRefs = new arrayRefsImpl();
    return arrayRefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public varRefs createvarRefs()
  {
    varRefsImpl varRefs = new varRefsImpl();
    return varRefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public varSymbol createvarSymbol()
  {
    varSymbolImpl varSymbol = new varSymbolImpl();
    return varSymbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public arrayDimension createarrayDimension()
  {
    arrayDimensionImpl arrayDimension = new arrayDimensionImpl();
    return arrayDimension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuncCall createFuncCall()
  {
    FuncCallImpl funcCall = new FuncCallImpl();
    return funcCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuncParameter createFuncParameter()
  {
    FuncParameterImpl funcParameter = new FuncParameterImpl();
    return funcParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuncDefinition createFuncDefinition()
  {
    FuncDefinitionImpl funcDefinition = new FuncDefinitionImpl();
    return funcDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractMethodCall createAbstractMethodCall()
  {
    AbstractMethodCallImpl abstractMethodCall = new AbstractMethodCallImpl();
    return abstractMethodCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StdFunction createStdFunction()
  {
    StdFunctionImpl stdFunction = new StdFunctionImpl();
    return stdFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfExpression createIfExpression()
  {
    IfExpressionImpl ifExpression = new IfExpressionImpl();
    return ifExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoWhileExpression createDoWhileExpression()
  {
    DoWhileExpressionImpl doWhileExpression = new DoWhileExpressionImpl();
    return doWhileExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BrkStr createBrkStr()
  {
    BrkStrImpl brkStr = new BrkStrImpl();
    return brkStr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnDeclaration createReturnDeclaration()
  {
    ReturnDeclarationImpl returnDeclaration = new ReturnDeclarationImpl();
    return returnDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DOUBLE createDOUBLE()
  {
    DOUBLEImpl double_ = new DOUBLEImpl();
    return double_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public varExpression createvarExpression()
  {
    varExpressionImpl varExpression = new varExpressionImpl();
    return varExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlusOrMinus createPlusOrMinus()
  {
    PlusOrMinusImpl plusOrMinus = new PlusOrMinusImpl();
    return plusOrMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MulOrDiv createMulOrDiv()
  {
    MulOrDivImpl mulOrDiv = new MulOrDivImpl();
    return mulOrDiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.vaselina.Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inside createInside()
  {
    InsideImpl inside = new InsideImpl();
    return inside;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringRef createStringRef()
  {
    StringRefImpl stringRef = new StringRefImpl();
    return stringRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public numRef createnumRef()
  {
    numRefImpl numRef = new numRefImpl();
    return numRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public doubleRef createdoubleRef()
  {
    doubleRefImpl doubleRef = new doubleRefImpl();
    return doubleRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolRef createboolRef()
  {
    boolRefImpl boolRef = new boolRefImpl();
    return boolRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public varRef createvarRef()
  {
    varRefImpl varRef = new varRefImpl();
    return varRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public arrayRef createarrayRef()
  {
    arrayRefImpl arrayRef = new arrayRefImpl();
    return arrayRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VaselinaPackage getVaselinaPackage()
  {
    return (VaselinaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static VaselinaPackage getPackage()
  {
    return VaselinaPackage.eINSTANCE;
  }

} //VaselinaFactoryImpl
