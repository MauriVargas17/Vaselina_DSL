/*
 * generated by Xtext 2.27.0-SNAPSHOT
 */
grammar InternalVaselina;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.VaselinaGrammarAccess;

}

@parser::members {

 	private VaselinaGrammarAccess grammarAccess;

    public InternalVaselinaParser(TokenStream input, VaselinaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "VaselinaProgram";
   	}

   	@Override
   	protected VaselinaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleVaselinaProgram
entryRuleVaselinaProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVaselinaProgramRule()); }
	iv_ruleVaselinaProgram=ruleVaselinaProgram
	{ $current=$iv_ruleVaselinaProgram.current; }
	EOF;

// Rule VaselinaProgram
ruleVaselinaProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVaselinaProgramAccess().getGlobalVarDeclaredParserRuleCall_0_0());
				}
				lv_global_0_0=rulevarDeclared
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVaselinaProgramRule());
					}
					add(
						$current,
						"global",
						lv_global_0_0,
						"org.xtext.example.mydsl.Vaselina.varDeclared");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getVaselinaProgramAccess().getFuncFuncDefinitionParserRuleCall_1_0());
				}
				lv_func_1_0=ruleFuncDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVaselinaProgramRule());
					}
					add(
						$current,
						"func",
						lv_func_1_0,
						"org.xtext.example.mydsl.Vaselina.FuncDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getVaselinaProgramAccess().getMainMainDeclaredParserRuleCall_2_0());
				}
				lv_main_2_0=rulemainDeclared
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVaselinaProgramRule());
					}
					set(
						$current,
						"main",
						lv_main_2_0,
						"org.xtext.example.mydsl.Vaselina.mainDeclared");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulemainDeclared
entryRulemainDeclared returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainDeclaredRule()); }
	iv_rulemainDeclared=rulemainDeclared
	{ $current=$iv_rulemainDeclared.current; }
	EOF;

// Rule mainDeclared
rulemainDeclared returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMainDeclaredAccess().getMainDeclaredAction_0(),
					$current);
			}
		)
		otherlv_1='Vaselinator'
		{
			newLeafNode(otherlv_1, grammarAccess.getMainDeclaredAccess().getVaselinatorKeyword_1());
		}
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getMainDeclaredAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMainDeclaredAccess().getBodyBodyStatementParserRuleCall_3_0());
				}
				lv_body_3_0=ruleBodyStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainDeclaredRule());
					}
					add(
						$current,
						"body",
						lv_body_3_0,
						"org.xtext.example.mydsl.Vaselina.BodyStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='<-'
		{
			newLeafNode(otherlv_4, grammarAccess.getMainDeclaredAccess().getLessThanSignHyphenMinusKeyword_4());
		}
	)
;

// Entry rule entryRuleBodyStatement
entryRuleBodyStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBodyStatementRule()); }
	iv_ruleBodyStatement=ruleBodyStatement
	{ $current=$iv_ruleBodyStatement.current; }
	EOF;

// Rule BodyStatement
ruleBodyStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBodyStatementAccess().getVarAssignmentParserRuleCall_0());
		}
		this_varAssignment_0=rulevarAssignment
		{
			$current = $this_varAssignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyStatementAccess().getVarReturnParserRuleCall_1());
		}
		this_varReturn_1=rulevarReturn
		{
			$current = $this_varReturn_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyStatementAccess().getVarDeclaredParserRuleCall_2());
		}
		this_varDeclared_2=rulevarDeclared
		{
			$current = $this_varDeclared_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyStatementAccess().getIfExpressionParserRuleCall_3());
		}
		this_IfExpression_3=ruleIfExpression
		{
			$current = $this_IfExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyStatementAccess().getDoWhileExpressionParserRuleCall_4());
		}
		this_DoWhileExpression_4=ruleDoWhileExpression
		{
			$current = $this_DoWhileExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyStatementAccess().getBrkStrParserRuleCall_5());
		}
		this_BrkStr_5=ruleBrkStr
		{
			$current = $this_BrkStr_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyStatementAccess().getAbstractMethodCallParserRuleCall_6());
		}
		this_AbstractMethodCall_6=ruleAbstractMethodCall
		{
			$current = $this_AbstractMethodCall_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBodyStatementAccess().getReturnDeclarationParserRuleCall_7());
		}
		this_ReturnDeclaration_7=ruleReturnDeclaration
		{
			$current = $this_ReturnDeclaration_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulevarReturn
entryRulevarReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarReturnRule()); }
	iv_rulevarReturn=rulevarReturn
	{ $current=$iv_rulevarReturn.current; }
	EOF;

// Rule varReturn
rulevarReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='keep'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarReturnAccess().getKeepKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarReturnAccess().getRtnVarExpressionParserRuleCall_1_0());
				}
				lv_rtn_1_0=rulevarExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarReturnRule());
					}
					set(
						$current,
						"rtn",
						lv_rtn_1_0,
						"org.xtext.example.mydsl.Vaselina.varExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevarTypeLiteral
entryRulevarTypeLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarTypeLiteralRule()); }
	iv_rulevarTypeLiteral=rulevarTypeLiteral
	{ $current=$iv_rulevarTypeLiteral.current.getText(); }
	EOF;

// Rule varTypeLiteral
rulevarTypeLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='numb'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeLiteralAccess().getNumbKeyword_0());
		}
		    |
		kw='strange'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeLiteralAccess().getStrangeKeyword_1());
		}
		    |
		kw='bull'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeLiteralAccess().getBullKeyword_2());
		}
		    |
		kw='dribble'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeLiteralAccess().getDribbleKeyword_3());
		}
	)
;

// Entry rule entryRulevarDeclared
entryRulevarDeclared returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclaredRule()); }
	iv_rulevarDeclared=rulevarDeclared
	{ $current=$iv_rulevarDeclared.current; }
	EOF;

// Rule varDeclared
rulevarDeclared returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarDeclaredAccess().getVarDeclaredAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						lv_scope_1_0='box'
						{
							newLeafNode(lv_scope_1_0, grammarAccess.getVarDeclaredAccess().getScopeBoxKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVarDeclaredRule());
							}
							setWithLastConsumed($current, "scope", lv_scope_1_0, "box");
						}
					)
				)
				(
					(
						lv_name_2_0=RULE_ID
						{
							newLeafNode(lv_name_2_0, grammarAccess.getVarDeclaredAccess().getNameIDTerminalRuleCall_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVarDeclaredRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_2_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_scope_3_0='boxes'
						{
							newLeafNode(lv_scope_3_0, grammarAccess.getVarDeclaredAccess().getScopeBoxesKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVarDeclaredRule());
							}
							setWithLastConsumed($current, "scope", lv_scope_3_0, "boxes");
						}
					)
				)
				(
					(
						lv_name_4_0=RULE_ID
						{
							newLeafNode(lv_name_4_0, grammarAccess.getVarDeclaredAccess().getNameIDTerminalRuleCall_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVarDeclaredRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_4_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getVarDeclaredAccess().getDimArrayDimensionParserRuleCall_1_1_2_0());
						}
						lv_dim_5_0=rulearrayDimension
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarDeclaredRule());
							}
							add(
								$current,
								"dim",
								lv_dim_5_0,
								"org.xtext.example.mydsl.Vaselina.arrayDimension");
							afterParserOrEnumRuleCall();
						}
					)
				)+
			)
		)
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getVarDeclaredAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclaredAccess().getTypeVarTypeLiteralParserRuleCall_3_0());
				}
				lv_type_7_0=rulevarTypeLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclaredRule());
					}
					set(
						$current,
						"type",
						lv_type_7_0,
						"org.xtext.example.mydsl.Vaselina.varTypeLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevarAssignment
entryRulevarAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarAssignmentRule()); }
	iv_rulevarAssignment=rulevarAssignment
	{ $current=$iv_rulevarAssignment.current; }
	EOF;

// Rule varAssignment
rulevarAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarAssignmentAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarAssignmentRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"org.xtext.example.mydsl.Vaselina.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='holds'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarAssignmentAccess().getHoldsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarAssignmentAccess().getExprVarExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=rulevarExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarAssignmentRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"org.xtext.example.mydsl.Vaselina.varExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableAccess().getArrayRefsParserRuleCall_0());
		}
		this_arrayRefs_0=rulearrayRefs
		{
			$current = $this_arrayRefs_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableAccess().getVarRefsParserRuleCall_1());
		}
		this_varRefs_1=rulevarRefs
		{
			$current = $this_varRefs_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulearrayRefs
entryRulearrayRefs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayRefsRule()); }
	iv_rulearrayRefs=rulearrayRefs
	{ $current=$iv_rulearrayRefs.current; }
	EOF;

// Rule arrayRefs
rulearrayRefs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArrayRefsAccess().getArrayRefsAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayRefsRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getArrayRefsAccess().getArrRefsVarSymbolCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayRefsAccess().getDimsArrayDimensionParserRuleCall_2_0());
				}
				lv_dims_2_0=rulearrayDimension
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayRefsRule());
					}
					add(
						$current,
						"dims",
						lv_dims_2_0,
						"org.xtext.example.mydsl.Vaselina.arrayDimension");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRulevarRefs
entryRulevarRefs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRefsRule()); }
	iv_rulevarRefs=rulevarRefs
	{ $current=$iv_rulevarRefs.current; }
	EOF;

// Rule varRefs
rulevarRefs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarRefsAccess().getVarRefsAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarRefsRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVarRefsAccess().getVaRefsVarSymbolCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRulearrayDimension
entryRulearrayDimension returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayDimensionRule()); }
	iv_rulearrayDimension=rulearrayDimension
	{ $current=$iv_rulearrayDimension.current; }
	EOF;

// Rule arrayDimension
rulearrayDimension returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArrayDimensionAccess().getArrayDimensionAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayDimensionAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayDimensionAccess().getIndexTerminalParserRuleCall_2_0());
				}
				lv_index_2_0=ruleTerminal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayDimensionRule());
					}
					set(
						$current,
						"index",
						lv_index_2_0,
						"org.xtext.example.mydsl.Vaselina.Terminal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getArrayDimensionAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFuncCall
entryRuleFuncCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncCallRule()); }
	iv_ruleFuncCall=ruleFuncCall
	{ $current=$iv_ruleFuncCall.current; }
	EOF;

// Rule FuncCall
ruleFuncCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFuncCallAccess().getFuncCallAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuncCallRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFuncCallAccess().getFuncFuncDefinitionCrossReference_1_0());
				}
			)
		)
		otherlv_2='using'
		{
			newLeafNode(otherlv_2, grammarAccess.getFuncCallAccess().getUsingKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getFuncCallAccess().getColonKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFuncCallAccess().getArgsVarExpressionParserRuleCall_4_0_0());
					}
					lv_args_4_0=rulevarExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFuncCallRule());
						}
						add(
							$current,
							"args",
							lv_args_4_0,
							"org.xtext.example.mydsl.Vaselina.varExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getFuncCallAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFuncCallAccess().getArgsVarExpressionParserRuleCall_4_1_1_0());
						}
						lv_args_6_0=rulevarExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFuncCallRule());
							}
							add(
								$current,
								"args",
								lv_args_6_0,
								"org.xtext.example.mydsl.Vaselina.varExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getFuncCallAccess().getColonKeyword_5());
		}
	)
;

// Entry rule entryRuleFuncParameter
entryRuleFuncParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncParameterRule()); }
	iv_ruleFuncParameter=ruleFuncParameter
	{ $current=$iv_ruleFuncParameter.current; }
	EOF;

// Rule FuncParameter
ruleFuncParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		if ($current==null) {
			$current = createModelElement(grammarAccess.getFuncParameterRule());
		}
		newCompositeNode(grammarAccess.getFuncParameterAccess().getFuncTypedDeclarationParserRuleCall());
	}
	this_FuncTypedDeclaration_0=ruleFuncTypedDeclaration[$current]
	{
		$current = $this_FuncTypedDeclaration_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFuncDefinition
entryRuleFuncDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncDefinitionRule()); }
	iv_ruleFuncDefinition=ruleFuncDefinition
	{ $current=$iv_ruleFuncDefinition.current; }
	EOF;

// Rule FuncDefinition
ruleFuncDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='braze'
		{
			newLeafNode(otherlv_0, grammarAccess.getFuncDefinitionAccess().getBrazeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFuncDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuncDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getFuncDefinitionAccess().getWithKeyword_2());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFuncDefinitionAccess().getArgsFuncParameterParserRuleCall_3_0_0_0());
						}
						lv_args_3_0=ruleFuncParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFuncDefinitionRule());
							}
							add(
								$current,
								"args",
								lv_args_3_0,
								"org.xtext.example.mydsl.Vaselina.FuncParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getFuncDefinitionAccess().getCommaKeyword_3_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getFuncDefinitionAccess().getArgsFuncParameterParserRuleCall_3_0_1_1_0());
							}
							lv_args_5_0=ruleFuncParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getFuncDefinitionRule());
								}
								add(
									$current,
									"args",
									lv_args_5_0,
									"org.xtext.example.mydsl.Vaselina.FuncParameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			otherlv_6='air'
			{
				newLeafNode(otherlv_6, grammarAccess.getFuncDefinitionAccess().getAirKeyword_3_1());
			}
		)
		otherlv_7='->'
		{
			newLeafNode(otherlv_7, grammarAccess.getFuncDefinitionAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncDefinitionAccess().getBodyBodyStatementParserRuleCall_5_0());
				}
				lv_body_8_0=ruleBodyStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncDefinitionRule());
					}
					add(
						$current,
						"body",
						lv_body_8_0,
						"org.xtext.example.mydsl.Vaselina.BodyStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='and'
		{
			newLeafNode(otherlv_9, grammarAccess.getFuncDefinitionAccess().getAndKeyword_6());
		}
		otherlv_10='vaselina'
		{
			newLeafNode(otherlv_10, grammarAccess.getFuncDefinitionAccess().getVaselinaKeyword_7());
		}
	)
;


// Rule FuncTypedDeclaration
ruleFuncTypedDeclaration[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncTypedDeclarationAccess().getTypeVarTypeLiteralParserRuleCall_0_0());
				}
				lv_type_0_0=rulevarTypeLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncTypedDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.example.mydsl.Vaselina.varTypeLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFuncTypedDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuncTypedDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAbstractMethodCall
entryRuleAbstractMethodCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractMethodCallRule()); }
	iv_ruleAbstractMethodCall=ruleAbstractMethodCall
	{ $current=$iv_ruleAbstractMethodCall.current; }
	EOF;

// Rule AbstractMethodCall
ruleAbstractMethodCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractMethodCallAccess().getFuncCallParserRuleCall_0());
		}
		this_FuncCall_0=ruleFuncCall
		{
			$current = $this_FuncCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractMethodCallAccess().getStdFunctionParserRuleCall_1());
		}
		this_StdFunction_1=ruleStdFunction
		{
			$current = $this_StdFunction_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStdfunctionList
entryRuleStdfunctionList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStdfunctionListRule()); }
	iv_ruleStdfunctionList=ruleStdfunctionList
	{ $current=$iv_ruleStdfunctionList.current.getText(); }
	EOF;

// Rule StdfunctionList
ruleStdfunctionList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='display'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStdfunctionListAccess().getDisplayKeyword_0());
		}
		    |
		kw='printstr'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStdfunctionListAccess().getPrintstrKeyword_1());
		}
		    |
		kw='strjoin'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStdfunctionListAccess().getStrjoinKeyword_2());
		}
		    |
		kw='strsplit'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStdfunctionListAccess().getStrsplitKeyword_3());
		}
		    |
		kw='anytostr'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStdfunctionListAccess().getAnytostrKeyword_4());
		}
		    |
		kw='getargs'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStdfunctionListAccess().getGetargsKeyword_5());
		}
		    |
		kw='equals'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStdfunctionListAccess().getEqualsKeyword_6());
		}
		    |
		kw='length'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStdfunctionListAccess().getLengthKeyword_7());
		}
	)
;

// Entry rule entryRuleStdFunction
entryRuleStdFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStdFunctionRule()); }
	iv_ruleStdFunction=ruleStdFunction
	{ $current=$iv_ruleStdFunction.current; }
	EOF;

// Rule StdFunction
ruleStdFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStdFunctionAccess().getStdFunctionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStdFunctionAccess().getNameStdfunctionListParserRuleCall_1_0());
				}
				lv_name_1_0=ruleStdfunctionList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStdFunctionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.mydsl.Vaselina.StdfunctionList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='using'
		{
			newLeafNode(otherlv_2, grammarAccess.getStdFunctionAccess().getUsingKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getStdFunctionAccess().getColonKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStdFunctionAccess().getArgsVarExpressionParserRuleCall_4_0_0());
					}
					lv_args_4_0=rulevarExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStdFunctionRule());
						}
						add(
							$current,
							"args",
							lv_args_4_0,
							"org.xtext.example.mydsl.Vaselina.varExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getStdFunctionAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStdFunctionAccess().getArgsVarExpressionParserRuleCall_4_1_1_0());
						}
						lv_args_6_0=rulevarExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStdFunctionRule());
							}
							add(
								$current,
								"args",
								lv_args_6_0,
								"org.xtext.example.mydsl.Vaselina.varExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getStdFunctionAccess().getColonKeyword_5());
		}
	)
;

// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	iv_ruleIfExpression=ruleIfExpression
	{ $current=$iv_ruleIfExpression.current; }
	EOF;

// Rule IfExpression
ruleIfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfExpressionAccess().getIfExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfExpressionAccess().getIsKeyword_1());
		}
		otherlv_2='this'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getThisKeyword_2());
		}
		otherlv_3='true?'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfExpressionAccess().getTrueKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getIfconditonVarExpressionParserRuleCall_5_0());
				}
				lv_ifconditon_5_0=rulevarExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"ifconditon",
						lv_ifconditon_5_0,
						"org.xtext.example.mydsl.Vaselina.varExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfExpressionAccess().getColonKeyword_6());
		}
		otherlv_7='yes'
		{
			newLeafNode(otherlv_7, grammarAccess.getIfExpressionAccess().getYesKeyword_7());
		}
		otherlv_8='->'
		{
			newLeafNode(otherlv_8, grammarAccess.getIfExpressionAccess().getHyphenMinusGreaterThanSignKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getThenBodyStatementParserRuleCall_9_0());
				}
				lv_then_9_0=ruleBodyStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					add(
						$current,
						"then",
						lv_then_9_0,
						"org.xtext.example.mydsl.Vaselina.BodyStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				('<-')=>
				otherlv_10='<-'
				{
					newLeafNode(otherlv_10, grammarAccess.getIfExpressionAccess().getLessThanSignHyphenMinusKeyword_10_0());
				}
			)
			otherlv_11='no'
			{
				newLeafNode(otherlv_11, grammarAccess.getIfExpressionAccess().getNoKeyword_10_1());
			}
			otherlv_12='->'
			{
				newLeafNode(otherlv_12, grammarAccess.getIfExpressionAccess().getHyphenMinusGreaterThanSignKeyword_10_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfExpressionAccess().getElseBodyStatementParserRuleCall_10_3_0());
					}
					lv_else_13_0=ruleBodyStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
						}
						add(
							$current,
							"else",
							lv_else_13_0,
							"org.xtext.example.mydsl.Vaselina.BodyStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			('<-')=>
			otherlv_14='<-'
			{
				newLeafNode(otherlv_14, grammarAccess.getIfExpressionAccess().getLessThanSignHyphenMinusKeyword_11());
			}
		)
	)
;

// Entry rule entryRuleDoWhileExpression
entryRuleDoWhileExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoWhileExpressionRule()); }
	iv_ruleDoWhileExpression=ruleDoWhileExpression
	{ $current=$iv_ruleDoWhileExpression.current; }
	EOF;

// Rule DoWhileExpression
ruleDoWhileExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDoWhileExpressionAccess().getDoWhileExpressionAction_0(),
					$current);
			}
		)
		otherlv_1='as'
		{
			newLeafNode(otherlv_1, grammarAccess.getDoWhileExpressionAccess().getAsKeyword_1());
		}
		otherlv_2='long'
		{
			newLeafNode(otherlv_2, grammarAccess.getDoWhileExpressionAccess().getLongKeyword_2());
		}
		otherlv_3='as'
		{
			newLeafNode(otherlv_3, grammarAccess.getDoWhileExpressionAccess().getAsKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getDoWhileExpressionAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileExpressionAccess().getLoopConditonVarExpressionParserRuleCall_5_0());
				}
				lv_loopConditon_5_0=rulevarExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileExpressionRule());
					}
					set(
						$current,
						"loopConditon",
						lv_loopConditon_5_0,
						"org.xtext.example.mydsl.Vaselina.varExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getDoWhileExpressionAccess().getColonKeyword_6());
		}
		otherlv_7='repeat'
		{
			newLeafNode(otherlv_7, grammarAccess.getDoWhileExpressionAccess().getRepeatKeyword_7());
		}
		otherlv_8='->'
		{
			newLeafNode(otherlv_8, grammarAccess.getDoWhileExpressionAccess().getHyphenMinusGreaterThanSignKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileExpressionAccess().getBodyBodyStatementParserRuleCall_9_0());
				}
				lv_body_9_0=ruleBodyStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileExpressionRule());
					}
					add(
						$current,
						"body",
						lv_body_9_0,
						"org.xtext.example.mydsl.Vaselina.BodyStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			('<-')=>
			otherlv_10='<-'
			{
				newLeafNode(otherlv_10, grammarAccess.getDoWhileExpressionAccess().getLessThanSignHyphenMinusKeyword_10());
			}
		)
	)
;

// Entry rule entryRuleBrkStr
entryRuleBrkStr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBrkStrRule()); }
	iv_ruleBrkStr=ruleBrkStr
	{ $current=$iv_ruleBrkStr.current; }
	EOF;

// Rule BrkStr
ruleBrkStr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBrkStrAccess().getBrkStrAction_0(),
					$current);
			}
		)
		(
			(
				lv_brk_1_0='break'
				{
					newLeafNode(lv_brk_1_0, grammarAccess.getBrkStrAccess().getBrkBreakKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBrkStrRule());
					}
					setWithLastConsumed($current, "brk", lv_brk_1_0, "break");
				}
			)
		)
	)
;

// Entry rule entryRuleReturnDeclaration
entryRuleReturnDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnDeclarationRule()); }
	iv_ruleReturnDeclaration=ruleReturnDeclaration
	{ $current=$iv_ruleReturnDeclaration.current; }
	EOF;

// Rule ReturnDeclaration
ruleReturnDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnDeclarationAccess().getTypeKeyword_0());
		}
		otherlv_1='keeping'
		{
			newLeafNode(otherlv_1, grammarAccess.getReturnDeclarationAccess().getKeepingKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnDeclarationAccess().getRtnTypeVarTypeLiteralParserRuleCall_2_0());
				}
				lv_rtnType_2_0=rulevarTypeLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnDeclarationRule());
					}
					set(
						$current,
						"rtnType",
						lv_rtnType_2_0,
						"org.xtext.example.mydsl.Vaselina.varTypeLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); }
	iv_ruleDOUBLE=ruleDOUBLE
	{ $current=$iv_ruleDOUBLE.current; }
	EOF;

// Rule DOUBLE
ruleDOUBLE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_integer_0_0=RULE_NUM
				{
					newLeafNode(lv_integer_0_0, grammarAccess.getDOUBLEAccess().getIntegerNUMTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDOUBLERule());
					}
					setWithLastConsumed(
						$current,
						"integer",
						lv_integer_0_0,
						"org.xtext.example.mydsl.Vaselina.NUM");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getDOUBLEAccess().getFullStopKeyword_1());
		}
		(
			(
				(
					lv_decimal_2_1=RULE_INT
					{
						newLeafNode(lv_decimal_2_1, grammarAccess.getDOUBLEAccess().getDecimalINTTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDOUBLERule());
						}
						setWithLastConsumed(
							$current,
							"decimal",
							lv_decimal_2_1,
							"org.eclipse.xtext.common.Terminals.INT");
					}
					    |
					lv_decimal_2_2=RULE_NUM
					{
						newLeafNode(lv_decimal_2_2, grammarAccess.getDOUBLEAccess().getDecimalNUMTerminalRuleCall_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDOUBLERule());
						}
						setWithLastConsumed(
							$current,
							"decimal",
							lv_decimal_2_2,
							"org.xtext.example.mydsl.Vaselina.NUM");
					}
				)
			)
		)
	)
;

// Entry rule entryRulevarExpression
entryRulevarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarExpressionRule()); }
	iv_rulevarExpression=rulevarExpression
	{ $current=$iv_rulevarExpression.current; }
	EOF;

// Rule varExpression
rulevarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getVarExpressionAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current = $this_Or_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='||'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "||");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Vaselina.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='&&'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getAndAccess().getOpAmpersandAmpersandKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAndRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "&&");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEquality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Vaselina.Equality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='=='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='!='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Vaselina.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0());
		}
		this_PlusOrMinus_0=rulePlusOrMinus
		{
			$current = $this_PlusOrMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='>='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='>'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='<'
						{
							newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Vaselina.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusOrMinusRule()); }
	iv_rulePlusOrMinus=rulePlusOrMinus
	{ $current=$iv_rulePlusOrMinus.current; }
	EOF;

// Rule PlusOrMinus
rulePlusOrMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0());
		}
		this_MulOrDiv_0=ruleMulOrDiv
		{
			$current = $this_MulOrDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPlusOrMinusAccess().getPlusOrMinusLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='+'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getPlusOrMinusAccess().getOpPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPlusOrMinusRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='-'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getPlusOrMinusAccess().getOpHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPlusOrMinusRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMulOrDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusOrMinusRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Vaselina.MulOrDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivRule()); }
	iv_ruleMulOrDiv=ruleMulOrDiv
	{ $current=$iv_ruleMulOrDiv.current; }
	EOF;

// Rule MulOrDiv
ruleMulOrDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulOrDivAccess().getModuleParserRuleCall_0());
		}
		this_Module_0=ruleModule
		{
			$current = $this_Module_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='*'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMulOrDivRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='/'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMulOrDivRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivAccess().getRightModuleParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleModule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Vaselina.Module");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	iv_ruleModule=ruleModule
	{ $current=$iv_ruleModule.current; }
	EOF;

// Rule Module
ruleModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModuleAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getModuleAccess().getModuleLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='%'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getModuleAccess().getOpPercentSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModuleRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "\%");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModuleAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuleRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.mydsl.Vaselina.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getInsideAction_0_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getInsideVarExpressionParserRuleCall_0_2_0());
					}
					lv_inside_2_0=rulevarExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"inside",
							lv_inside_2_0,
							"org.xtext.example.mydsl.Vaselina.varExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_5='!'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0());
					}
					lv_expression_6_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_6_0,
							"org.xtext.example.mydsl.Vaselina.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAbstractMethodCallParserRuleCall_2());
		}
		this_AbstractMethodCall_7=ruleAbstractMethodCall
		{
			$current = $this_AbstractMethodCall_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getTerminalParserRuleCall_3());
		}
		this_Terminal_8=ruleTerminal
		{
			$current = $this_Terminal_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminal
entryRuleTerminal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalRule()); }
	iv_ruleTerminal=ruleTerminal
	{ $current=$iv_ruleTerminal.current; }
	EOF;

// Rule Terminal
ruleTerminal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalAccess().getStringRefAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_STRING
					{
						newLeafNode(lv_value_1_0, grammarAccess.getTerminalAccess().getValueSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalAccess().getNumRefAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_NUM
					{
						newLeafNode(lv_value_3_0, grammarAccess.getTerminalAccess().getValueNUMTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.xtext.example.mydsl.Vaselina.NUM");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalAccess().getDoubleRefAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalAccess().getValueDOUBLEParserRuleCall_2_1_0());
					}
					lv_value_5_0=ruleDOUBLE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"org.xtext.example.mydsl.Vaselina.DOUBLE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalAccess().getBoolRefAction_3_0(),
						$current);
				}
			)
			(
				(
					(
						lv_varRef_7_1='true...'
						{
							newLeafNode(lv_varRef_7_1, grammarAccess.getTerminalAccess().getVarRefTrueKeyword_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTerminalRule());
							}
							setWithLastConsumed($current, "varRef", lv_varRef_7_1, null);
						}
						    |
						lv_varRef_7_2='false...'
						{
							newLeafNode(lv_varRef_7_2, grammarAccess.getTerminalAccess().getVarRefFalseKeyword_3_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTerminalRule());
							}
							setWithLastConsumed($current, "varRef", lv_varRef_7_2, null);
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalAccess().getVarRefAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalRule());
						}
					}
					otherlv_9=RULE_ID
					{
						newLeafNode(otherlv_9, grammarAccess.getTerminalAccess().getVarRefVarSymbolCrossReference_4_1_0());
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTerminalAccess().getArrayRefAction_5_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalRule());
						}
					}
					otherlv_11=RULE_ID
					{
						newLeafNode(otherlv_11, grammarAccess.getTerminalAccess().getVarRefVarSymbolCrossReference_5_1_0());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalAccess().getDimArrayDimensionParserRuleCall_5_2_0());
					}
					lv_dim_12_0=rulearrayDimension
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalRule());
						}
						add(
							$current,
							"dim",
							lv_dim_12_0,
							"org.xtext.example.mydsl.Vaselina.arrayDimension");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
	)
;

RULE_NUM : ('1'..'9' ('0'..'9')*|'0');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
