/*
 * generated by Xtext 2.27.0-SNAPSHOT
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VaselinaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class VaselinaProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.VaselinaProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGlobalVarDeclaredParserRuleCall_0_0 = (RuleCall)cGlobalAssignment_0.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncFuncDefinitionParserRuleCall_1_0 = (RuleCall)cFuncAssignment_1.eContents().get(0);
		private final Assignment cMainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMainMainDeclaredParserRuleCall_2_0 = (RuleCall)cMainAssignment_2.eContents().get(0);
		
		//VaselinaProgram:
		//    global+=varDeclared*
		//    func+=(FuncDefinition)*
		//    main=mainDeclared;
		@Override public ParserRule getRule() { return rule; }
		
		//global+=varDeclared*
		//func+=(FuncDefinition)*
		//main=mainDeclared
		public Group getGroup() { return cGroup; }
		
		//global+=varDeclared*
		public Assignment getGlobalAssignment_0() { return cGlobalAssignment_0; }
		
		//varDeclared
		public RuleCall getGlobalVarDeclaredParserRuleCall_0_0() { return cGlobalVarDeclaredParserRuleCall_0_0; }
		
		//func+=(FuncDefinition)*
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//(FuncDefinition)
		public RuleCall getFuncFuncDefinitionParserRuleCall_1_0() { return cFuncFuncDefinitionParserRuleCall_1_0; }
		
		//main=mainDeclared
		public Assignment getMainAssignment_2() { return cMainAssignment_2; }
		
		//mainDeclared
		public RuleCall getMainMainDeclaredParserRuleCall_2_0() { return cMainMainDeclaredParserRuleCall_2_0; }
	}
	public class MainDeclaredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.mainDeclared");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainDeclaredAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVaselinatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyBodyStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//mainDeclared:
		//    {mainDeclared}
		//    'Vaselinator' '->'
		//        body+=BodyStatement*
		//    '<-';
		@Override public ParserRule getRule() { return rule; }
		
		//{mainDeclared}
		//'Vaselinator' '->'
		//    body+=BodyStatement*
		//'<-'
		public Group getGroup() { return cGroup; }
		
		//{mainDeclared}
		public Action getMainDeclaredAction_0() { return cMainDeclaredAction_0; }
		
		//'Vaselinator'
		public Keyword getVaselinatorKeyword_1() { return cVaselinatorKeyword_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//body+=BodyStatement*
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//BodyStatement
		public RuleCall getBodyBodyStatementParserRuleCall_3_0() { return cBodyBodyStatementParserRuleCall_3_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_4() { return cLessThanSignHyphenMinusKeyword_4; }
	}
	public class BodyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.BodyStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDeclaredParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoWhileExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBrkStrParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAbstractMethodCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnDeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//BodyStatement:
		//    varAssignment| varReturn | varDeclared |
		//    IfExpression | DoWhileExpression | BrkStr
		//    | AbstractMethodCall | ReturnDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//varAssignment| varReturn | varDeclared |
		//IfExpression | DoWhileExpression | BrkStr
		//| AbstractMethodCall | ReturnDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//varAssignment
		public RuleCall getVarAssignmentParserRuleCall_0() { return cVarAssignmentParserRuleCall_0; }
		
		//varReturn
		public RuleCall getVarReturnParserRuleCall_1() { return cVarReturnParserRuleCall_1; }
		
		//varDeclared
		public RuleCall getVarDeclaredParserRuleCall_2() { return cVarDeclaredParserRuleCall_2; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_3() { return cIfExpressionParserRuleCall_3; }
		
		//DoWhileExpression
		public RuleCall getDoWhileExpressionParserRuleCall_4() { return cDoWhileExpressionParserRuleCall_4; }
		
		//BrkStr
		public RuleCall getBrkStrParserRuleCall_5() { return cBrkStrParserRuleCall_5; }
		
		//AbstractMethodCall
		public RuleCall getAbstractMethodCallParserRuleCall_6() { return cAbstractMethodCallParserRuleCall_6; }
		
		//ReturnDeclaration
		public RuleCall getReturnDeclarationParserRuleCall_7() { return cReturnDeclarationParserRuleCall_7; }
	}
	public class VarReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.varReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRtnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRtnVarExpressionParserRuleCall_1_0 = (RuleCall)cRtnAssignment_1.eContents().get(0);
		
		//varReturn:
		//    'keep' rtn=varExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'keep' rtn=varExpression
		public Group getGroup() { return cGroup; }
		
		//'keep'
		public Keyword getKeepKeyword_0() { return cKeepKeyword_0; }
		
		//rtn=varExpression
		public Assignment getRtnAssignment_1() { return cRtnAssignment_1; }
		
		//varExpression
		public RuleCall getRtnVarExpressionParserRuleCall_1_0() { return cRtnVarExpressionParserRuleCall_1_0; }
	}
	public class VarTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.varTypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNumbKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStrangeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBullKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDribbleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//varTypeLiteral:
		//    'numb' | 'strange' | 'bull' | 'dribble';
		@Override public ParserRule getRule() { return rule; }
		
		//'numb' | 'strange' | 'bull' | 'dribble'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'numb'
		public Keyword getNumbKeyword_0() { return cNumbKeyword_0; }
		
		//'strange'
		public Keyword getStrangeKeyword_1() { return cStrangeKeyword_1; }
		
		//'bull'
		public Keyword getBullKeyword_2() { return cBullKeyword_2; }
		
		//'dribble'
		public Keyword getDribbleKeyword_3() { return cDribbleKeyword_3; }
	}
	public class VarDeclaredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.varDeclared");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclaredAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cScopeBoxKeyword_1_0 = (Keyword)cScopeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0_0 = (RuleCall)cNameAssignment_2_1_0.eContents().get(0);
		private final Assignment cDimAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDimArrayDimensionParserRuleCall_2_1_1_0 = (RuleCall)cDimAssignment_2_1_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeVarTypeLiteralParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//varDeclared:
		//    {varDeclared}
		//    scope='box' (name=ID | name=ID (dim+=arrayDimension)+) ':' type=varTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//{varDeclared}
		//scope='box' (name=ID | name=ID (dim+=arrayDimension)+) ':' type=varTypeLiteral
		public Group getGroup() { return cGroup; }
		
		//{varDeclared}
		public Action getVarDeclaredAction_0() { return cVarDeclaredAction_0; }
		
		//scope='box'
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }
		
		//'box'
		public Keyword getScopeBoxKeyword_1_0() { return cScopeBoxKeyword_1_0; }
		
		//(name=ID | name=ID (dim+=arrayDimension)+)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//name=ID (dim+=arrayDimension)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0_0() { return cNameIDTerminalRuleCall_2_1_0_0; }
		
		//(dim+=arrayDimension)+
		public Assignment getDimAssignment_2_1_1() { return cDimAssignment_2_1_1; }
		
		//arrayDimension
		public RuleCall getDimArrayDimensionParserRuleCall_2_1_1_0() { return cDimArrayDimensionParserRuleCall_2_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=varTypeLiteral
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//varTypeLiteral
		public RuleCall getTypeVarTypeLiteralParserRuleCall_4_0() { return cTypeVarTypeLiteralParserRuleCall_4_0; }
	}
	public class VarAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.varAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cHoldsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprVarExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//varAssignment:
		//    variable=Variable 'holds' expr=varExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Variable 'holds' expr=varExpression
		public Group getGroup() { return cGroup; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//'holds'
		public Keyword getHoldsKeyword_1() { return cHoldsKeyword_1; }
		
		//expr=varExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//varExpression
		public RuleCall getExprVarExpressionParserRuleCall_2_0() { return cExprVarExpressionParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArrayRefsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVarRefsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cVarRefsVarSymbolCrossReference_0_1_0 = (CrossReference)cVarRefsAssignment_0_1.eContents().get(0);
		private final RuleCall cVarRefsVarSymbolIDTerminalRuleCall_0_1_0_1 = (RuleCall)cVarRefsVarSymbolCrossReference_0_1_0.eContents().get(1);
		private final Assignment cDimAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDimArrayDimensionParserRuleCall_0_2_0 = (RuleCall)cDimAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVarRefsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVarRefsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVarRefsVarSymbolCrossReference_1_1_0 = (CrossReference)cVarRefsAssignment_1_1.eContents().get(0);
		private final RuleCall cVarRefsVarSymbolIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVarRefsVarSymbolCrossReference_1_1_0.eContents().get(1);
		
		//Variable:
		//    {arrayRefs} varRefs=[varSymbol] (dim+=arrayDimension)+
		//    | {varRefs} varRefs=[varSymbol]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{arrayRefs} varRefs=[varSymbol] (dim+=arrayDimension)+
		//| {varRefs} varRefs=[varSymbol]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{arrayRefs} varRefs=[varSymbol] (dim+=arrayDimension)+
		public Group getGroup_0() { return cGroup_0; }
		
		//{arrayRefs}
		public Action getArrayRefsAction_0_0() { return cArrayRefsAction_0_0; }
		
		//varRefs=[varSymbol]
		public Assignment getVarRefsAssignment_0_1() { return cVarRefsAssignment_0_1; }
		
		//[varSymbol]
		public CrossReference getVarRefsVarSymbolCrossReference_0_1_0() { return cVarRefsVarSymbolCrossReference_0_1_0; }
		
		//ID
		public RuleCall getVarRefsVarSymbolIDTerminalRuleCall_0_1_0_1() { return cVarRefsVarSymbolIDTerminalRuleCall_0_1_0_1; }
		
		//(dim+=arrayDimension)+
		public Assignment getDimAssignment_0_2() { return cDimAssignment_0_2; }
		
		//arrayDimension
		public RuleCall getDimArrayDimensionParserRuleCall_0_2_0() { return cDimArrayDimensionParserRuleCall_0_2_0; }
		
		//{varRefs} varRefs=[varSymbol]
		public Group getGroup_1() { return cGroup_1; }
		
		//{varRefs}
		public Action getVarRefsAction_1_0() { return cVarRefsAction_1_0; }
		
		//varRefs=[varSymbol]
		public Assignment getVarRefsAssignment_1_1() { return cVarRefsAssignment_1_1; }
		
		//[varSymbol]
		public CrossReference getVarRefsVarSymbolCrossReference_1_1_0() { return cVarRefsVarSymbolCrossReference_1_1_0; }
		
		//ID
		public RuleCall getVarRefsVarSymbolIDTerminalRuleCall_1_1_0_1() { return cVarRefsVarSymbolIDTerminalRuleCall_1_1_0_1; }
	}
	public class VarSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.varSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclaredParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//varSymbol:
		//    varDeclared | FuncParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//varDeclared | FuncParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//varDeclared
		public RuleCall getVarDeclaredParserRuleCall_0() { return cVarDeclaredParserRuleCall_0; }
		
		//FuncParameter
		public RuleCall getFuncParameterParserRuleCall_1() { return cFuncParameterParserRuleCall_1; }
	}
	public class ArrayDimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.arrayDimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayDimensionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cIndexVarSymbolCrossReference_2_0_0 = (CrossReference)cIndexAssignment_2_0.eContents().get(0);
		private final RuleCall cIndexVarSymbolIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIndexVarSymbolCrossReference_2_0_0.eContents().get(1);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSizeNUMTerminalRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//arrayDimension:
		//    {arrayDimension}
		//    '[' (index=[varSymbol] | size=NUM) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{arrayDimension}
		//'[' (index=[varSymbol] | size=NUM) ']'
		public Group getGroup() { return cGroup; }
		
		//{arrayDimension}
		public Action getArrayDimensionAction_0() { return cArrayDimensionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(index=[varSymbol] | size=NUM)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//index=[varSymbol]
		public Assignment getIndexAssignment_2_0() { return cIndexAssignment_2_0; }
		
		//[varSymbol]
		public CrossReference getIndexVarSymbolCrossReference_2_0_0() { return cIndexVarSymbolCrossReference_2_0_0; }
		
		//ID
		public RuleCall getIndexVarSymbolIDTerminalRuleCall_2_0_0_1() { return cIndexVarSymbolIDTerminalRuleCall_2_0_0_1; }
		
		//size=NUM
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }
		
		//NUM
		public RuleCall getSizeNUMTerminalRuleCall_2_1_0() { return cSizeNUMTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class FuncCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.FuncCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFuncCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFuncFuncDefinitionCrossReference_1_0 = (CrossReference)cFuncAssignment_1.eContents().get(0);
		private final RuleCall cFuncFuncDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cFuncFuncDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cUsingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgsVarExpressionParserRuleCall_4_0_0 = (RuleCall)cArgsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgsVarExpressionParserRuleCall_4_1_1_0 = (RuleCall)cArgsAssignment_4_1_1.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FuncCall:
		//    {FuncCall}
		//    func=[FuncDefinition] 'using' ':' (args+=varExpression (',' args+=varExpression)*)? ':';
		@Override public ParserRule getRule() { return rule; }
		
		//{FuncCall}
		//func=[FuncDefinition] 'using' ':' (args+=varExpression (',' args+=varExpression)*)? ':'
		public Group getGroup() { return cGroup; }
		
		//{FuncCall}
		public Action getFuncCallAction_0() { return cFuncCallAction_0; }
		
		//func=[FuncDefinition]
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//[FuncDefinition]
		public CrossReference getFuncFuncDefinitionCrossReference_1_0() { return cFuncFuncDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getFuncFuncDefinitionIDTerminalRuleCall_1_0_1() { return cFuncFuncDefinitionIDTerminalRuleCall_1_0_1; }
		
		//'using'
		public Keyword getUsingKeyword_2() { return cUsingKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(args+=varExpression (',' args+=varExpression)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//args+=varExpression
		public Assignment getArgsAssignment_4_0() { return cArgsAssignment_4_0; }
		
		//varExpression
		public RuleCall getArgsVarExpressionParserRuleCall_4_0_0() { return cArgsVarExpressionParserRuleCall_4_0_0; }
		
		//(',' args+=varExpression)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//args+=varExpression
		public Assignment getArgsAssignment_4_1_1() { return cArgsAssignment_4_1_1; }
		
		//varExpression
		public RuleCall getArgsVarExpressionParserRuleCall_4_1_1_0() { return cArgsVarExpressionParserRuleCall_4_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
	}
	public class FuncParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.FuncParameter");
		private final RuleCall cFuncTypedDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FuncParameter:
		//    FuncTypedDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncTypedDeclaration
		public RuleCall getFuncTypedDeclarationParserRuleCall() { return cFuncTypedDeclarationParserRuleCall; }
	}
	public class FuncDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.FuncDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBrazeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cArgsFuncParameterParserRuleCall_3_0_0_0 = (RuleCall)cArgsAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cArgsFuncParameterParserRuleCall_3_0_1_1_0 = (RuleCall)cArgsAssignment_3_0_1_1.eContents().get(0);
		private final Keyword cAirKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBodyStatementParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cAndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cVaselinaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FuncDefinition:
		//    'braze' name=ID 'with' ((args+=FuncParameter (',' args+=FuncParameter)*) | 'air') '->'
		//        body+=BodyStatement*
		//    'and' 'vaselina';
		@Override public ParserRule getRule() { return rule; }
		
		//'braze' name=ID 'with' ((args+=FuncParameter (',' args+=FuncParameter)*) | 'air') '->'
		//    body+=BodyStatement*
		//'and' 'vaselina'
		public Group getGroup() { return cGroup; }
		
		//'braze'
		public Keyword getBrazeKeyword_0() { return cBrazeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//((args+=FuncParameter (',' args+=FuncParameter)*) | 'air')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//(args+=FuncParameter (',' args+=FuncParameter)*)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//args+=FuncParameter
		public Assignment getArgsAssignment_3_0_0() { return cArgsAssignment_3_0_0; }
		
		//FuncParameter
		public RuleCall getArgsFuncParameterParserRuleCall_3_0_0_0() { return cArgsFuncParameterParserRuleCall_3_0_0_0; }
		
		//(',' args+=FuncParameter)*
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_3_0_1_0() { return cCommaKeyword_3_0_1_0; }
		
		//args+=FuncParameter
		public Assignment getArgsAssignment_3_0_1_1() { return cArgsAssignment_3_0_1_1; }
		
		//FuncParameter
		public RuleCall getArgsFuncParameterParserRuleCall_3_0_1_1_0() { return cArgsFuncParameterParserRuleCall_3_0_1_1_0; }
		
		//'air'
		public Keyword getAirKeyword_3_1() { return cAirKeyword_3_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//body+=BodyStatement*
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//BodyStatement
		public RuleCall getBodyBodyStatementParserRuleCall_5_0() { return cBodyBodyStatementParserRuleCall_5_0; }
		
		//'and'
		public Keyword getAndKeyword_6() { return cAndKeyword_6; }
		
		//'vaselina'
		public Keyword getVaselinaKeyword_7() { return cVaselinaKeyword_7; }
	}
	public class FuncTypedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.FuncTypedDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(0);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVarTypeLiteralParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//fragment FuncTypedDeclaration *:
		//    type=varTypeLiteral name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=varTypeLiteral name=ID
		public Group getGroup() { return cGroup; }
		
		//type=varTypeLiteral
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//varTypeLiteral
		public RuleCall getTypeVarTypeLiteralParserRuleCall_0_0() { return cTypeVarTypeLiteralParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AbstractMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.AbstractMethodCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStdFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractMethodCall:
		//    FuncCall | StdFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncCall | StdFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncCall
		public RuleCall getFuncCallParserRuleCall_0() { return cFuncCallParserRuleCall_0; }
		
		//StdFunction
		public RuleCall getStdFunctionParserRuleCall_1() { return cStdFunctionParserRuleCall_1; }
	}
	public class StdfunctionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.StdfunctionList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPrintstrKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStrjoinKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStrsplitKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNumtostrKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGetargsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//StdfunctionList:
		//    'printstr' | 'strjoin' | 'strsplit' | 'numtostr' | 'getargs'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'printstr' | 'strjoin' | 'strsplit' | 'numtostr' | 'getargs'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'printstr'
		public Keyword getPrintstrKeyword_0() { return cPrintstrKeyword_0; }
		
		//'strjoin'
		public Keyword getStrjoinKeyword_1() { return cStrjoinKeyword_1; }
		
		//'strsplit'
		public Keyword getStrsplitKeyword_2() { return cStrsplitKeyword_2; }
		
		//'numtostr'
		public Keyword getNumtostrKeyword_3() { return cNumtostrKeyword_3; }
		
		//'getargs'
		public Keyword getGetargsKeyword_4() { return cGetargsKeyword_4; }
	}
	public class StdFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.StdFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStdFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStdfunctionListParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cUsingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgsVarExpressionParserRuleCall_4_0_0 = (RuleCall)cArgsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgsVarExpressionParserRuleCall_4_1_1_0 = (RuleCall)cArgsAssignment_4_1_1.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StdFunction:
		//    {StdFunction}
		//    name=StdfunctionList 'using' ':' (args+=varExpression (',' args+=varExpression)*)? ':';
		@Override public ParserRule getRule() { return rule; }
		
		//{StdFunction}
		//name=StdfunctionList 'using' ':' (args+=varExpression (',' args+=varExpression)*)? ':'
		public Group getGroup() { return cGroup; }
		
		//{StdFunction}
		public Action getStdFunctionAction_0() { return cStdFunctionAction_0; }
		
		//name=StdfunctionList
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StdfunctionList
		public RuleCall getNameStdfunctionListParserRuleCall_1_0() { return cNameStdfunctionListParserRuleCall_1_0; }
		
		//'using'
		public Keyword getUsingKeyword_2() { return cUsingKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(args+=varExpression (',' args+=varExpression)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//args+=varExpression
		public Assignment getArgsAssignment_4_0() { return cArgsAssignment_4_0; }
		
		//varExpression
		public RuleCall getArgsVarExpressionParserRuleCall_4_0_0() { return cArgsVarExpressionParserRuleCall_4_0_0; }
		
		//(',' args+=varExpression)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//args+=varExpression
		public Assignment getArgsAssignment_4_1_1() { return cArgsAssignment_4_1_1; }
		
		//varExpression
		public RuleCall getArgsVarExpressionParserRuleCall_4_1_1_0() { return cArgsVarExpressionParserRuleCall_4_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cThisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTrueKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIfconditonAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfconditonVarExpressionParserRuleCall_5_0 = (RuleCall)cIfconditonAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cYesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cThenAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cThenBodyStatementParserRuleCall_9_0 = (RuleCall)cThenAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLessThanSignHyphenMinusKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cNoKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cElseAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cElseBodyStatementParserRuleCall_10_3_0 = (RuleCall)cElseAssignment_10_3.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//IfExpression:
		//    {IfExpression}
		//    'is' 'this' 'true?' ':' ifconditon=varExpression ':' 'yes' '->'
		//        then+=(BodyStatement)*
		//    (=> '<-''no''->'
		//        else+=(BodyStatement)*)?
		//    (=> '<-');
		@Override public ParserRule getRule() { return rule; }
		
		//{IfExpression}
		//'is' 'this' 'true?' ':' ifconditon=varExpression ':' 'yes' '->'
		//    then+=(BodyStatement)*
		//(=> '<-''no''->'
		//    else+=(BodyStatement)*)?
		//(=> '<-')
		public Group getGroup() { return cGroup; }
		
		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'this'
		public Keyword getThisKeyword_2() { return cThisKeyword_2; }
		
		//'true?'
		public Keyword getTrueKeyword_3() { return cTrueKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//ifconditon=varExpression
		public Assignment getIfconditonAssignment_5() { return cIfconditonAssignment_5; }
		
		//varExpression
		public RuleCall getIfconditonVarExpressionParserRuleCall_5_0() { return cIfconditonVarExpressionParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//'yes'
		public Keyword getYesKeyword_7() { return cYesKeyword_7; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_8() { return cHyphenMinusGreaterThanSignKeyword_8; }
		
		//then+=(BodyStatement)*
		public Assignment getThenAssignment_9() { return cThenAssignment_9; }
		
		//(BodyStatement)
		public RuleCall getThenBodyStatementParserRuleCall_9_0() { return cThenBodyStatementParserRuleCall_9_0; }
		
		//(=> '<-''no''->'
		//    else+=(BodyStatement)*)?
		public Group getGroup_10() { return cGroup_10; }
		
		//=> '<-'
		public Keyword getLessThanSignHyphenMinusKeyword_10_0() { return cLessThanSignHyphenMinusKeyword_10_0; }
		
		//'no'
		public Keyword getNoKeyword_10_1() { return cNoKeyword_10_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_10_2() { return cHyphenMinusGreaterThanSignKeyword_10_2; }
		
		//else+=(BodyStatement)*
		public Assignment getElseAssignment_10_3() { return cElseAssignment_10_3; }
		
		//(BodyStatement)
		public RuleCall getElseBodyStatementParserRuleCall_10_3_0() { return cElseBodyStatementParserRuleCall_10_3_0; }
		
		//(=> '<-')
		public Keyword getLessThanSignHyphenMinusKeyword_11() { return cLessThanSignHyphenMinusKeyword_11; }
	}
	public class DoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.DoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLongKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLoopConditonAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLoopConditonVarExpressionParserRuleCall_5_0 = (RuleCall)cLoopConditonAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRepeatKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyBodyStatementParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//DoWhileExpression:
		//    {DoWhileExpression}
		//    'as' 'long' 'as' ':' loopConditon=varExpression ':' 'repeat' '->'
		//        body+=(BodyStatement)*
		//    (=> '<-');
		@Override public ParserRule getRule() { return rule; }
		
		//{DoWhileExpression}
		//'as' 'long' 'as' ':' loopConditon=varExpression ':' 'repeat' '->'
		//    body+=(BodyStatement)*
		//(=> '<-')
		public Group getGroup() { return cGroup; }
		
		//{DoWhileExpression}
		public Action getDoWhileExpressionAction_0() { return cDoWhileExpressionAction_0; }
		
		//'as'
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
		
		//'long'
		public Keyword getLongKeyword_2() { return cLongKeyword_2; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//loopConditon=varExpression
		public Assignment getLoopConditonAssignment_5() { return cLoopConditonAssignment_5; }
		
		//varExpression
		public RuleCall getLoopConditonVarExpressionParserRuleCall_5_0() { return cLoopConditonVarExpressionParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//'repeat'
		public Keyword getRepeatKeyword_7() { return cRepeatKeyword_7; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_8() { return cHyphenMinusGreaterThanSignKeyword_8; }
		
		//body+=(BodyStatement)*
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }
		
		//(BodyStatement)
		public RuleCall getBodyBodyStatementParserRuleCall_9_0() { return cBodyBodyStatementParserRuleCall_9_0; }
		
		//(=> '<-')
		public Keyword getLessThanSignHyphenMinusKeyword_10() { return cLessThanSignHyphenMinusKeyword_10; }
	}
	public class BrkStrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.BrkStr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBrkStrAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBrkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBrkBreakKeyword_1_0 = (Keyword)cBrkAssignment_1.eContents().get(0);
		
		//BrkStr:
		//    {BrkStr}
		//    brk='break';
		@Override public ParserRule getRule() { return rule; }
		
		//{BrkStr}
		//brk='break'
		public Group getGroup() { return cGroup; }
		
		//{BrkStr}
		public Action getBrkStrAction_0() { return cBrkStrAction_0; }
		
		//brk='break'
		public Assignment getBrkAssignment_1() { return cBrkAssignment_1; }
		
		//'break'
		public Keyword getBrkBreakKeyword_1_0() { return cBrkBreakKeyword_1_0; }
	}
	public class ReturnDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.ReturnDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cKeepingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRtnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRtnTypeVarTypeLiteralParserRuleCall_2_0 = (RuleCall)cRtnTypeAssignment_2.eContents().get(0);
		
		//ReturnDeclaration:
		//    'type' 'keeping' rtnType=varTypeLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' 'keeping' rtnType=varTypeLiteral
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//'keeping'
		public Keyword getKeepingKeyword_1() { return cKeepingKeyword_1; }
		
		//rtnType=varTypeLiteral
		public Assignment getRtnTypeAssignment_2() { return cRtnTypeAssignment_2; }
		
		//varTypeLiteral
		public RuleCall getRtnTypeVarTypeLiteralParserRuleCall_2_0() { return cRtnTypeVarTypeLiteralParserRuleCall_2_0; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntegerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntegerNUMTerminalRuleCall_0_0 = (RuleCall)cIntegerAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDecimalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cDecimalAlternatives_2_0 = (Alternatives)cDecimalAssignment_2.eContents().get(0);
		private final RuleCall cDecimalINTTerminalRuleCall_2_0_0 = (RuleCall)cDecimalAlternatives_2_0.eContents().get(0);
		private final RuleCall cDecimalNUMTerminalRuleCall_2_0_1 = (RuleCall)cDecimalAlternatives_2_0.eContents().get(1);
		
		//DOUBLE:
		//    integer=NUM '.' decimal=(INT|NUM)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//integer=NUM '.' decimal=(INT|NUM)
		public Group getGroup() { return cGroup; }
		
		//integer=NUM
		public Assignment getIntegerAssignment_0() { return cIntegerAssignment_0; }
		
		//NUM
		public RuleCall getIntegerNUMTerminalRuleCall_0_0() { return cIntegerNUMTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//decimal=(INT|NUM)
		public Assignment getDecimalAssignment_2() { return cDecimalAssignment_2; }
		
		//(INT|NUM)
		public Alternatives getDecimalAlternatives_2_0() { return cDecimalAlternatives_2_0; }
		
		//INT
		public RuleCall getDecimalINTTerminalRuleCall_2_0_0() { return cDecimalINTTerminalRuleCall_2_0_0; }
		
		//NUM
		public RuleCall getDecimalNUMTerminalRuleCall_2_0_1() { return cDecimalNUMTerminalRuleCall_2_0_1; }
	}
	public class VarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.varExpression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//varExpression:
		//    Or
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns varExpression:
		//    And({Or.left=current} op='||' right=And)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//And({Or.left=current} op='||' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} op='||' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns varExpression:
		//    Equality({And.left=current} op='&&' right=Equality)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality({And.left=current} op='&&' right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} op='&&' right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality returns varExpression:
		//    Comparison({Equality.left=current} op=('=='|'!=') right=Comparison)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison({Equality.left=current} op=('=='|'!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=('=='|'!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=('=='|'!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('=='|'!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns varExpression:
		//    PlusOrMinus({Comparison.left=current} op=('>='|'<='|'>'|'<') right=PlusOrMinus)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus({Comparison.left=current} op=('>='|'<='|'>'|'<') right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=('>='|'<='|'>'|'<') right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=('>='|'<='|'>'|'<')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('>='|'<='|'>'|'<')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusOrMinusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMulOrDivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PlusOrMinus returns varExpression:
		//    MulOrDiv({PlusOrMinus.left=current} op=('+'|'-') right=MulOrDiv)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv({PlusOrMinus.left=current} op=('+'|'-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//({PlusOrMinus.left=current} op=('+'|'-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PlusOrMinus.left=current}
		public Action getPlusOrMinusLeftAction_1_0() { return cPlusOrMinusLeftAction_1_0; }
		
		//op=('+'|'-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+'|'-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_2_0() { return cRightMulOrDivParserRuleCall_1_2_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModuleParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightModuleParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv returns varExpression:
		//    Module({MulOrDiv.left=current} op=('*'|'/') right=Module)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Module({MulOrDiv.left=current} op=('*'|'/') right=Module)*
		public Group getGroup() { return cGroup; }
		
		//Module
		public RuleCall getModuleParserRuleCall_0() { return cModuleParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*'|'/') right=Module)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*'|'/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*'|'/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Module
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Module
		public RuleCall getRightModuleParserRuleCall_1_2_0() { return cRightModuleParserRuleCall_1_2_0; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cModuleLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Module returns varExpression:
		//    Primary({Module.left=current} op='%' right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary({Module.left=current} op='%' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Module.left=current} op='%' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Module.left=current}
		public Action getModuleLeftAction_1_0() { return cModuleLeftAction_1_0; }
		
		//op='%'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'%'
		public Keyword getOpPercentSignKeyword_1_1_0() { return cOpPercentSignKeyword_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cInsideAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cInsideAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInsideVarExpressionParserRuleCall_0_2_0 = (RuleCall)cInsideAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAbstractMethodCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTerminalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary returns varExpression:
		//    '('{Inside} inside=varExpression')' | {Not} '!' expression=Primary | AbstractMethodCall | Terminal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'('{Inside} inside=varExpression')' | {Not} '!' expression=Primary | AbstractMethodCall | Terminal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('{Inside} inside=varExpression')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//{Inside}
		public Action getInsideAction_0_1() { return cInsideAction_0_1; }
		
		//inside=varExpression
		public Assignment getInsideAssignment_0_2() { return cInsideAssignment_0_2; }
		
		//varExpression
		public RuleCall getInsideVarExpressionParserRuleCall_0_2_0() { return cInsideVarExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{Not} '!' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//AbstractMethodCall
		public RuleCall getAbstractMethodCallParserRuleCall_2() { return cAbstractMethodCallParserRuleCall_2; }
		
		//Terminal
		public RuleCall getTerminalParserRuleCall_3() { return cTerminalParserRuleCall_3; }
	}
	public class TerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.Terminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNUMTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDoubleRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueDOUBLEParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVarRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cVarRefAlternatives_3_1_0 = (Alternatives)cVarRefAssignment_3_1.eContents().get(0);
		private final Keyword cVarRefTrueKeyword_3_1_0_0 = (Keyword)cVarRefAlternatives_3_1_0.eContents().get(0);
		private final Keyword cVarRefFalseKeyword_3_1_0_1 = (Keyword)cVarRefAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVarRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cVarRefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cVarRefVarSymbolCrossReference_4_1_0 = (CrossReference)cVarRefAssignment_4_1.eContents().get(0);
		private final RuleCall cVarRefVarSymbolIDTerminalRuleCall_4_1_0_1 = (RuleCall)cVarRefVarSymbolCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cArrayRefAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cVarRefAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cVarRefVarSymbolCrossReference_5_1_0 = (CrossReference)cVarRefAssignment_5_1.eContents().get(0);
		private final RuleCall cVarRefVarSymbolIDTerminalRuleCall_5_1_0_1 = (RuleCall)cVarRefVarSymbolCrossReference_5_1_0.eContents().get(1);
		private final Assignment cDimAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDimArrayDimensionParserRuleCall_5_2_0 = (RuleCall)cDimAssignment_5_2.eContents().get(0);
		
		//Terminal returns varExpression:
		//    {StringRef} value=STRING | {numRef} value=NUM | {doubleRef} value=DOUBLE
		//    | {boolRef} varRef=('true...' | 'false...') |
		//    {varRef} varRef=[varSymbol] | {arrayRef} varRef=[varSymbol] (dim+=arrayDimension)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StringRef} value=STRING | {numRef} value=NUM | {doubleRef} value=DOUBLE
		//| {boolRef} varRef=('true...' | 'false...') |
		//{varRef} varRef=[varSymbol] | {arrayRef} varRef=[varSymbol] (dim+=arrayDimension)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringRef} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringRef}
		public Action getStringRefAction_0_0() { return cStringRefAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//{numRef} value=NUM
		public Group getGroup_1() { return cGroup_1; }
		
		//{numRef}
		public Action getNumRefAction_1_0() { return cNumRefAction_1_0; }
		
		//value=NUM
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//NUM
		public RuleCall getValueNUMTerminalRuleCall_1_1_0() { return cValueNUMTerminalRuleCall_1_1_0; }
		
		//{doubleRef} value=DOUBLE
		public Group getGroup_2() { return cGroup_2; }
		
		//{doubleRef}
		public Action getDoubleRefAction_2_0() { return cDoubleRefAction_2_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_2_1_0() { return cValueDOUBLEParserRuleCall_2_1_0; }
		
		//{boolRef} varRef=('true...' | 'false...')
		public Group getGroup_3() { return cGroup_3; }
		
		//{boolRef}
		public Action getBoolRefAction_3_0() { return cBoolRefAction_3_0; }
		
		//varRef=('true...' | 'false...')
		public Assignment getVarRefAssignment_3_1() { return cVarRefAssignment_3_1; }
		
		//('true...' | 'false...')
		public Alternatives getVarRefAlternatives_3_1_0() { return cVarRefAlternatives_3_1_0; }
		
		//'true...'
		public Keyword getVarRefTrueKeyword_3_1_0_0() { return cVarRefTrueKeyword_3_1_0_0; }
		
		//'false...'
		public Keyword getVarRefFalseKeyword_3_1_0_1() { return cVarRefFalseKeyword_3_1_0_1; }
		
		//{varRef} varRef=[varSymbol]
		public Group getGroup_4() { return cGroup_4; }
		
		//{varRef}
		public Action getVarRefAction_4_0() { return cVarRefAction_4_0; }
		
		//varRef=[varSymbol]
		public Assignment getVarRefAssignment_4_1() { return cVarRefAssignment_4_1; }
		
		//[varSymbol]
		public CrossReference getVarRefVarSymbolCrossReference_4_1_0() { return cVarRefVarSymbolCrossReference_4_1_0; }
		
		//ID
		public RuleCall getVarRefVarSymbolIDTerminalRuleCall_4_1_0_1() { return cVarRefVarSymbolIDTerminalRuleCall_4_1_0_1; }
		
		//{arrayRef} varRef=[varSymbol] (dim+=arrayDimension)+
		public Group getGroup_5() { return cGroup_5; }
		
		//{arrayRef}
		public Action getArrayRefAction_5_0() { return cArrayRefAction_5_0; }
		
		//varRef=[varSymbol]
		public Assignment getVarRefAssignment_5_1() { return cVarRefAssignment_5_1; }
		
		//[varSymbol]
		public CrossReference getVarRefVarSymbolCrossReference_5_1_0() { return cVarRefVarSymbolCrossReference_5_1_0; }
		
		//ID
		public RuleCall getVarRefVarSymbolIDTerminalRuleCall_5_1_0_1() { return cVarRefVarSymbolIDTerminalRuleCall_5_1_0_1; }
		
		//(dim+=arrayDimension)+
		public Assignment getDimAssignment_5_2() { return cDimAssignment_5_2; }
		
		//arrayDimension
		public RuleCall getDimArrayDimensionParserRuleCall_5_2_0() { return cDimArrayDimensionParserRuleCall_5_2_0; }
	}
	
	
	private final VaselinaProgramElements pVaselinaProgram;
	private final MainDeclaredElements pMainDeclared;
	private final BodyStatementElements pBodyStatement;
	private final VarReturnElements pVarReturn;
	private final VarTypeLiteralElements pVarTypeLiteral;
	private final VarDeclaredElements pVarDeclared;
	private final VarAssignmentElements pVarAssignment;
	private final VariableElements pVariable;
	private final VarSymbolElements pVarSymbol;
	private final ArrayDimensionElements pArrayDimension;
	private final FuncCallElements pFuncCall;
	private final FuncParameterElements pFuncParameter;
	private final FuncDefinitionElements pFuncDefinition;
	private final FuncTypedDeclarationElements pFuncTypedDeclaration;
	private final AbstractMethodCallElements pAbstractMethodCall;
	private final StdfunctionListElements pStdfunctionList;
	private final StdFunctionElements pStdFunction;
	private final IfExpressionElements pIfExpression;
	private final DoWhileExpressionElements pDoWhileExpression;
	private final BrkStrElements pBrkStr;
	private final ReturnDeclarationElements pReturnDeclaration;
	private final TerminalRule tNUM;
	private final DOUBLEElements pDOUBLE;
	private final VarExpressionElements pVarExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final ModuleElements pModule;
	private final PrimaryElements pPrimary;
	private final TerminalElements pTerminal;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VaselinaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVaselinaProgram = new VaselinaProgramElements();
		this.pMainDeclared = new MainDeclaredElements();
		this.pBodyStatement = new BodyStatementElements();
		this.pVarReturn = new VarReturnElements();
		this.pVarTypeLiteral = new VarTypeLiteralElements();
		this.pVarDeclared = new VarDeclaredElements();
		this.pVarAssignment = new VarAssignmentElements();
		this.pVariable = new VariableElements();
		this.pVarSymbol = new VarSymbolElements();
		this.pArrayDimension = new ArrayDimensionElements();
		this.pFuncCall = new FuncCallElements();
		this.pFuncParameter = new FuncParameterElements();
		this.pFuncDefinition = new FuncDefinitionElements();
		this.pFuncTypedDeclaration = new FuncTypedDeclarationElements();
		this.pAbstractMethodCall = new AbstractMethodCallElements();
		this.pStdfunctionList = new StdfunctionListElements();
		this.pStdFunction = new StdFunctionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pDoWhileExpression = new DoWhileExpressionElements();
		this.pBrkStr = new BrkStrElements();
		this.pReturnDeclaration = new ReturnDeclarationElements();
		this.tNUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Vaselina.NUM");
		this.pDOUBLE = new DOUBLEElements();
		this.pVarExpression = new VarExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pModule = new ModuleElements();
		this.pPrimary = new PrimaryElements();
		this.pTerminal = new TerminalElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Vaselina".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//VaselinaProgram:
	//    global+=varDeclared*
	//    func+=(FuncDefinition)*
	//    main=mainDeclared;
	public VaselinaProgramElements getVaselinaProgramAccess() {
		return pVaselinaProgram;
	}
	
	public ParserRule getVaselinaProgramRule() {
		return getVaselinaProgramAccess().getRule();
	}
	
	//mainDeclared:
	//    {mainDeclared}
	//    'Vaselinator' '->'
	//        body+=BodyStatement*
	//    '<-';
	public MainDeclaredElements getMainDeclaredAccess() {
		return pMainDeclared;
	}
	
	public ParserRule getMainDeclaredRule() {
		return getMainDeclaredAccess().getRule();
	}
	
	//BodyStatement:
	//    varAssignment| varReturn | varDeclared |
	//    IfExpression | DoWhileExpression | BrkStr
	//    | AbstractMethodCall | ReturnDeclaration
	//;
	public BodyStatementElements getBodyStatementAccess() {
		return pBodyStatement;
	}
	
	public ParserRule getBodyStatementRule() {
		return getBodyStatementAccess().getRule();
	}
	
	//varReturn:
	//    'keep' rtn=varExpression;
	public VarReturnElements getVarReturnAccess() {
		return pVarReturn;
	}
	
	public ParserRule getVarReturnRule() {
		return getVarReturnAccess().getRule();
	}
	
	//varTypeLiteral:
	//    'numb' | 'strange' | 'bull' | 'dribble';
	public VarTypeLiteralElements getVarTypeLiteralAccess() {
		return pVarTypeLiteral;
	}
	
	public ParserRule getVarTypeLiteralRule() {
		return getVarTypeLiteralAccess().getRule();
	}
	
	//varDeclared:
	//    {varDeclared}
	//    scope='box' (name=ID | name=ID (dim+=arrayDimension)+) ':' type=varTypeLiteral;
	public VarDeclaredElements getVarDeclaredAccess() {
		return pVarDeclared;
	}
	
	public ParserRule getVarDeclaredRule() {
		return getVarDeclaredAccess().getRule();
	}
	
	//varAssignment:
	//    variable=Variable 'holds' expr=varExpression;
	public VarAssignmentElements getVarAssignmentAccess() {
		return pVarAssignment;
	}
	
	public ParserRule getVarAssignmentRule() {
		return getVarAssignmentAccess().getRule();
	}
	
	//Variable:
	//    {arrayRefs} varRefs=[varSymbol] (dim+=arrayDimension)+
	//    | {varRefs} varRefs=[varSymbol]
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//varSymbol:
	//    varDeclared | FuncParameter
	//;
	public VarSymbolElements getVarSymbolAccess() {
		return pVarSymbol;
	}
	
	public ParserRule getVarSymbolRule() {
		return getVarSymbolAccess().getRule();
	}
	
	//arrayDimension:
	//    {arrayDimension}
	//    '[' (index=[varSymbol] | size=NUM) ']';
	public ArrayDimensionElements getArrayDimensionAccess() {
		return pArrayDimension;
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}
	
	//FuncCall:
	//    {FuncCall}
	//    func=[FuncDefinition] 'using' ':' (args+=varExpression (',' args+=varExpression)*)? ':';
	public FuncCallElements getFuncCallAccess() {
		return pFuncCall;
	}
	
	public ParserRule getFuncCallRule() {
		return getFuncCallAccess().getRule();
	}
	
	//FuncParameter:
	//    FuncTypedDeclaration;
	public FuncParameterElements getFuncParameterAccess() {
		return pFuncParameter;
	}
	
	public ParserRule getFuncParameterRule() {
		return getFuncParameterAccess().getRule();
	}
	
	//FuncDefinition:
	//    'braze' name=ID 'with' ((args+=FuncParameter (',' args+=FuncParameter)*) | 'air') '->'
	//        body+=BodyStatement*
	//    'and' 'vaselina';
	public FuncDefinitionElements getFuncDefinitionAccess() {
		return pFuncDefinition;
	}
	
	public ParserRule getFuncDefinitionRule() {
		return getFuncDefinitionAccess().getRule();
	}
	
	//fragment FuncTypedDeclaration *:
	//    type=varTypeLiteral name=ID
	//;
	public FuncTypedDeclarationElements getFuncTypedDeclarationAccess() {
		return pFuncTypedDeclaration;
	}
	
	public ParserRule getFuncTypedDeclarationRule() {
		return getFuncTypedDeclarationAccess().getRule();
	}
	
	//AbstractMethodCall:
	//    FuncCall | StdFunction;
	public AbstractMethodCallElements getAbstractMethodCallAccess() {
		return pAbstractMethodCall;
	}
	
	public ParserRule getAbstractMethodCallRule() {
		return getAbstractMethodCallAccess().getRule();
	}
	
	//StdfunctionList:
	//    'printstr' | 'strjoin' | 'strsplit' | 'numtostr' | 'getargs'
	//;
	public StdfunctionListElements getStdfunctionListAccess() {
		return pStdfunctionList;
	}
	
	public ParserRule getStdfunctionListRule() {
		return getStdfunctionListAccess().getRule();
	}
	
	//StdFunction:
	//    {StdFunction}
	//    name=StdfunctionList 'using' ':' (args+=varExpression (',' args+=varExpression)*)? ':';
	public StdFunctionElements getStdFunctionAccess() {
		return pStdFunction;
	}
	
	public ParserRule getStdFunctionRule() {
		return getStdFunctionAccess().getRule();
	}
	
	//IfExpression:
	//    {IfExpression}
	//    'is' 'this' 'true?' ':' ifconditon=varExpression ':' 'yes' '->'
	//        then+=(BodyStatement)*
	//    (=> '<-''no''->'
	//        else+=(BodyStatement)*)?
	//    (=> '<-');
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//DoWhileExpression:
	//    {DoWhileExpression}
	//    'as' 'long' 'as' ':' loopConditon=varExpression ':' 'repeat' '->'
	//        body+=(BodyStatement)*
	//    (=> '<-');
	public DoWhileExpressionElements getDoWhileExpressionAccess() {
		return pDoWhileExpression;
	}
	
	public ParserRule getDoWhileExpressionRule() {
		return getDoWhileExpressionAccess().getRule();
	}
	
	//BrkStr:
	//    {BrkStr}
	//    brk='break';
	public BrkStrElements getBrkStrAccess() {
		return pBrkStr;
	}
	
	public ParserRule getBrkStrRule() {
		return getBrkStrAccess().getRule();
	}
	
	//ReturnDeclaration:
	//    'type' 'keeping' rtnType=varTypeLiteral
	//;
	public ReturnDeclarationElements getReturnDeclarationAccess() {
		return pReturnDeclaration;
	}
	
	public ParserRule getReturnDeclarationRule() {
		return getReturnDeclarationAccess().getRule();
	}
	
	//terminal NUM returns ecore::EInt:
	//    (('1'..'9')('0'..'9')*) | '0';
	public TerminalRule getNUMRule() {
		return tNUM;
	}
	
	//DOUBLE:
	//    integer=NUM '.' decimal=(INT|NUM)
	//;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//varExpression:
	//    Or
	//;
	public VarExpressionElements getVarExpressionAccess() {
		return pVarExpression;
	}
	
	public ParserRule getVarExpressionRule() {
		return getVarExpressionAccess().getRule();
	}
	
	//Or returns varExpression:
	//    And({Or.left=current} op='||' right=And)*
	//;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And returns varExpression:
	//    Equality({And.left=current} op='&&' right=Equality)*
	//;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality returns varExpression:
	//    Comparison({Equality.left=current} op=('=='|'!=') right=Comparison)*
	//;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison returns varExpression:
	//    PlusOrMinus({Comparison.left=current} op=('>='|'<='|'>'|'<') right=PlusOrMinus)*
	//;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus returns varExpression:
	//    MulOrDiv({PlusOrMinus.left=current} op=('+'|'-') right=MulOrDiv)*
	//;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv returns varExpression:
	//    Module({MulOrDiv.left=current} op=('*'|'/') right=Module)*
	//;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Module returns varExpression:
	//    Primary({Module.left=current} op='%' right=Primary)*
	//;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Primary returns varExpression:
	//    '('{Inside} inside=varExpression')' | {Not} '!' expression=Primary | AbstractMethodCall | Terminal
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Terminal returns varExpression:
	//    {StringRef} value=STRING | {numRef} value=NUM | {doubleRef} value=DOUBLE
	//    | {boolRef} varRef=('true...' | 'false...') |
	//    {varRef} varRef=[varSymbol] | {arrayRef} varRef=[varSymbol] (dim+=arrayDimension)+
	//;
	public TerminalElements getTerminalAccess() {
		return pTerminal;
	}
	
	public ParserRule getTerminalRule() {
		return getTerminalAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
