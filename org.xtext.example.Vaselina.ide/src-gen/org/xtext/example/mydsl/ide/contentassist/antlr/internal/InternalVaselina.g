/*
 * generated by Xtext 2.27.0-SNAPSHOT
 */
grammar InternalVaselina;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.VaselinaGrammarAccess;

}
@parser::members {
	private VaselinaGrammarAccess grammarAccess;

	public void setGrammarAccess(VaselinaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleVaselinaProgram
entryRuleVaselinaProgram
:
{ before(grammarAccess.getVaselinaProgramRule()); }
	 ruleVaselinaProgram
{ after(grammarAccess.getVaselinaProgramRule()); } 
	 EOF 
;

// Rule VaselinaProgram
ruleVaselinaProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVaselinaProgramAccess().getGroup()); }
		(rule__VaselinaProgram__Group__0)
		{ after(grammarAccess.getVaselinaProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemainDeclared
entryRulemainDeclared
:
{ before(grammarAccess.getMainDeclaredRule()); }
	 rulemainDeclared
{ after(grammarAccess.getMainDeclaredRule()); } 
	 EOF 
;

// Rule mainDeclared
rulemainDeclared 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainDeclaredAccess().getGroup()); }
		(rule__MainDeclared__Group__0)
		{ after(grammarAccess.getMainDeclaredAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBodyStatement
entryRuleBodyStatement
:
{ before(grammarAccess.getBodyStatementRule()); }
	 ruleBodyStatement
{ after(grammarAccess.getBodyStatementRule()); } 
	 EOF 
;

// Rule BodyStatement
ruleBodyStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyStatementAccess().getAlternatives()); }
		(rule__BodyStatement__Alternatives)
		{ after(grammarAccess.getBodyStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarReturn
entryRulevarReturn
:
{ before(grammarAccess.getVarReturnRule()); }
	 rulevarReturn
{ after(grammarAccess.getVarReturnRule()); } 
	 EOF 
;

// Rule varReturn
rulevarReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarReturnAccess().getGroup()); }
		(rule__VarReturn__Group__0)
		{ after(grammarAccess.getVarReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarTypeLiteral
entryRulevarTypeLiteral
:
{ before(grammarAccess.getVarTypeLiteralRule()); }
	 rulevarTypeLiteral
{ after(grammarAccess.getVarTypeLiteralRule()); } 
	 EOF 
;

// Rule varTypeLiteral
rulevarTypeLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarTypeLiteralAccess().getAlternatives()); }
		(rule__VarTypeLiteral__Alternatives)
		{ after(grammarAccess.getVarTypeLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarDeclared
entryRulevarDeclared
:
{ before(grammarAccess.getVarDeclaredRule()); }
	 rulevarDeclared
{ after(grammarAccess.getVarDeclaredRule()); } 
	 EOF 
;

// Rule varDeclared
rulevarDeclared 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclaredAccess().getGroup()); }
		(rule__VarDeclared__Group__0)
		{ after(grammarAccess.getVarDeclaredAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarAssignment
entryRulevarAssignment
:
{ before(grammarAccess.getVarAssignmentRule()); }
	 rulevarAssignment
{ after(grammarAccess.getVarAssignmentRule()); } 
	 EOF 
;

// Rule varAssignment
rulevarAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarAssignmentAccess().getGroup()); }
		(rule__VarAssignment__Group__0)
		{ after(grammarAccess.getVarAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getAlternatives()); }
		(rule__Variable__Alternatives)
		{ after(grammarAccess.getVariableAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulearrayRefs
entryRulearrayRefs
:
{ before(grammarAccess.getArrayRefsRule()); }
	 rulearrayRefs
{ after(grammarAccess.getArrayRefsRule()); } 
	 EOF 
;

// Rule arrayRefs
rulearrayRefs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayRefsAccess().getGroup()); }
		(rule__ArrayRefs__Group__0)
		{ after(grammarAccess.getArrayRefsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarRefs
entryRulevarRefs
:
{ before(grammarAccess.getVarRefsRule()); }
	 rulevarRefs
{ after(grammarAccess.getVarRefsRule()); } 
	 EOF 
;

// Rule varRefs
rulevarRefs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarRefsAccess().getGroup()); }
		(rule__VarRefs__Group__0)
		{ after(grammarAccess.getVarRefsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulearrayDimension
entryRulearrayDimension
:
{ before(grammarAccess.getArrayDimensionRule()); }
	 rulearrayDimension
{ after(grammarAccess.getArrayDimensionRule()); } 
	 EOF 
;

// Rule arrayDimension
rulearrayDimension 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayDimensionAccess().getGroup()); }
		(rule__ArrayDimension__Group__0)
		{ after(grammarAccess.getArrayDimensionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncCall
entryRuleFuncCall
:
{ before(grammarAccess.getFuncCallRule()); }
	 ruleFuncCall
{ after(grammarAccess.getFuncCallRule()); } 
	 EOF 
;

// Rule FuncCall
ruleFuncCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncCallAccess().getGroup()); }
		(rule__FuncCall__Group__0)
		{ after(grammarAccess.getFuncCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncParameter
entryRuleFuncParameter
:
{ before(grammarAccess.getFuncParameterRule()); }
	 ruleFuncParameter
{ after(grammarAccess.getFuncParameterRule()); } 
	 EOF 
;

// Rule FuncParameter
ruleFuncParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncParameterAccess().getFuncTypedDeclarationParserRuleCall()); }
		ruleFuncTypedDeclaration
		{ after(grammarAccess.getFuncParameterAccess().getFuncTypedDeclarationParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncDefinition
entryRuleFuncDefinition
:
{ before(grammarAccess.getFuncDefinitionRule()); }
	 ruleFuncDefinition
{ after(grammarAccess.getFuncDefinitionRule()); } 
	 EOF 
;

// Rule FuncDefinition
ruleFuncDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getGroup()); }
		(rule__FuncDefinition__Group__0)
		{ after(grammarAccess.getFuncDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}


// Rule FuncTypedDeclaration
ruleFuncTypedDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncTypedDeclarationAccess().getGroup()); }
		(rule__FuncTypedDeclaration__Group__0)
		{ after(grammarAccess.getFuncTypedDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractMethodCall
entryRuleAbstractMethodCall
:
{ before(grammarAccess.getAbstractMethodCallRule()); }
	 ruleAbstractMethodCall
{ after(grammarAccess.getAbstractMethodCallRule()); } 
	 EOF 
;

// Rule AbstractMethodCall
ruleAbstractMethodCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractMethodCallAccess().getAlternatives()); }
		(rule__AbstractMethodCall__Alternatives)
		{ after(grammarAccess.getAbstractMethodCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStdfunctionList
entryRuleStdfunctionList
:
{ before(grammarAccess.getStdfunctionListRule()); }
	 ruleStdfunctionList
{ after(grammarAccess.getStdfunctionListRule()); } 
	 EOF 
;

// Rule StdfunctionList
ruleStdfunctionList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStdfunctionListAccess().getAlternatives()); }
		(rule__StdfunctionList__Alternatives)
		{ after(grammarAccess.getStdfunctionListAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStdFunction
entryRuleStdFunction
:
{ before(grammarAccess.getStdFunctionRule()); }
	 ruleStdFunction
{ after(grammarAccess.getStdFunctionRule()); } 
	 EOF 
;

// Rule StdFunction
ruleStdFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStdFunctionAccess().getGroup()); }
		(rule__StdFunction__Group__0)
		{ after(grammarAccess.getStdFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfExpression
entryRuleIfExpression
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
		(rule__IfExpression__Group__0)
		{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoWhileExpression
entryRuleDoWhileExpression
:
{ before(grammarAccess.getDoWhileExpressionRule()); }
	 ruleDoWhileExpression
{ after(grammarAccess.getDoWhileExpressionRule()); } 
	 EOF 
;

// Rule DoWhileExpression
ruleDoWhileExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoWhileExpressionAccess().getGroup()); }
		(rule__DoWhileExpression__Group__0)
		{ after(grammarAccess.getDoWhileExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBrkStr
entryRuleBrkStr
:
{ before(grammarAccess.getBrkStrRule()); }
	 ruleBrkStr
{ after(grammarAccess.getBrkStrRule()); } 
	 EOF 
;

// Rule BrkStr
ruleBrkStr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBrkStrAccess().getGroup()); }
		(rule__BrkStr__Group__0)
		{ after(grammarAccess.getBrkStrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnDeclaration
entryRuleReturnDeclaration
:
{ before(grammarAccess.getReturnDeclarationRule()); }
	 ruleReturnDeclaration
{ after(grammarAccess.getReturnDeclarationRule()); } 
	 EOF 
;

// Rule ReturnDeclaration
ruleReturnDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnDeclarationAccess().getGroup()); }
		(rule__ReturnDeclaration__Group__0)
		{ after(grammarAccess.getReturnDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDOUBLE
entryRuleDOUBLE
:
{ before(grammarAccess.getDOUBLERule()); }
	 ruleDOUBLE
{ after(grammarAccess.getDOUBLERule()); } 
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDOUBLEAccess().getGroup()); }
		(rule__DOUBLE__Group__0)
		{ after(grammarAccess.getDOUBLEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarExpression
entryRulevarExpression
:
{ before(grammarAccess.getVarExpressionRule()); }
	 rulevarExpression
{ after(grammarAccess.getVarExpressionRule()); } 
	 EOF 
;

// Rule varExpression
rulevarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarExpressionAccess().getOrParserRuleCall()); }
		ruleOr
		{ after(grammarAccess.getVarExpressionAccess().getOrParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquality
entryRuleEquality
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityAccess().getGroup()); }
		(rule__Equality__Group__0)
		{ after(grammarAccess.getEqualityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus
:
{ before(grammarAccess.getPlusOrMinusRule()); }
	 rulePlusOrMinus
{ after(grammarAccess.getPlusOrMinusRule()); } 
	 EOF 
;

// Rule PlusOrMinus
rulePlusOrMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup()); }
		(rule__PlusOrMinus__Group__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv
:
{ before(grammarAccess.getMulOrDivRule()); }
	 ruleMulOrDiv
{ after(grammarAccess.getMulOrDivRule()); } 
	 EOF 
;

// Rule MulOrDiv
ruleMulOrDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMulOrDivAccess().getGroup()); }
		(rule__MulOrDiv__Group__0)
		{ after(grammarAccess.getMulOrDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModule
entryRuleModule
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuleAccess().getGroup()); }
		(rule__Module__Group__0)
		{ after(grammarAccess.getModuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminal
entryRuleTerminal
:
{ before(grammarAccess.getTerminalRule()); }
	 ruleTerminal
{ after(grammarAccess.getTerminalRule()); } 
	 EOF 
;

// Rule Terminal
ruleTerminal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalAccess().getAlternatives()); }
		(rule__Terminal__Alternatives)
		{ after(grammarAccess.getTerminalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BodyStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyStatementAccess().getVarAssignmentParserRuleCall_0()); }
		rulevarAssignment
		{ after(grammarAccess.getBodyStatementAccess().getVarAssignmentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBodyStatementAccess().getVarReturnParserRuleCall_1()); }
		rulevarReturn
		{ after(grammarAccess.getBodyStatementAccess().getVarReturnParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBodyStatementAccess().getVarDeclaredParserRuleCall_2()); }
		rulevarDeclared
		{ after(grammarAccess.getBodyStatementAccess().getVarDeclaredParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBodyStatementAccess().getIfExpressionParserRuleCall_3()); }
		ruleIfExpression
		{ after(grammarAccess.getBodyStatementAccess().getIfExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBodyStatementAccess().getDoWhileExpressionParserRuleCall_4()); }
		ruleDoWhileExpression
		{ after(grammarAccess.getBodyStatementAccess().getDoWhileExpressionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getBodyStatementAccess().getBrkStrParserRuleCall_5()); }
		ruleBrkStr
		{ after(grammarAccess.getBodyStatementAccess().getBrkStrParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getBodyStatementAccess().getAbstractMethodCallParserRuleCall_6()); }
		ruleAbstractMethodCall
		{ after(grammarAccess.getBodyStatementAccess().getAbstractMethodCallParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getBodyStatementAccess().getReturnDeclarationParserRuleCall_7()); }
		ruleReturnDeclaration
		{ after(grammarAccess.getBodyStatementAccess().getReturnDeclarationParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarTypeLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTypeLiteralAccess().getNumbKeyword_0()); }
		'numb'
		{ after(grammarAccess.getVarTypeLiteralAccess().getNumbKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeLiteralAccess().getStrangeKeyword_1()); }
		'strange'
		{ after(grammarAccess.getVarTypeLiteralAccess().getStrangeKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeLiteralAccess().getBullKeyword_2()); }
		'bull'
		{ after(grammarAccess.getVarTypeLiteralAccess().getBullKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeLiteralAccess().getDribbleKeyword_3()); }
		'dribble'
		{ after(grammarAccess.getVarTypeLiteralAccess().getDribbleKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclaredAccess().getGroup_1_0()); }
		(rule__VarDeclared__Group_1_0__0)
		{ after(grammarAccess.getVarDeclaredAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarDeclaredAccess().getGroup_1_1()); }
		(rule__VarDeclared__Group_1_1__0)
		{ after(grammarAccess.getVarDeclaredAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getArrayRefsParserRuleCall_0()); }
		rulearrayRefs
		{ after(grammarAccess.getVariableAccess().getArrayRefsParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getVarRefsParserRuleCall_1()); }
		rulevarRefs
		{ after(grammarAccess.getVariableAccess().getVarRefsParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getGroup_3_0()); }
		(rule__FuncDefinition__Group_3_0__0)
		{ after(grammarAccess.getFuncDefinitionAccess().getGroup_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getAirKeyword_3_1()); }
		'air'
		{ after(grammarAccess.getFuncDefinitionAccess().getAirKeyword_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractMethodCall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractMethodCallAccess().getFuncCallParserRuleCall_0()); }
		ruleFuncCall
		{ after(grammarAccess.getAbstractMethodCallAccess().getFuncCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractMethodCallAccess().getStdFunctionParserRuleCall_1()); }
		ruleStdFunction
		{ after(grammarAccess.getAbstractMethodCallAccess().getStdFunctionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdfunctionList__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStdfunctionListAccess().getDisplayKeyword_0()); }
		'display'
		{ after(grammarAccess.getStdfunctionListAccess().getDisplayKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getStdfunctionListAccess().getPrintstrKeyword_1()); }
		'printstr'
		{ after(grammarAccess.getStdfunctionListAccess().getPrintstrKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getStdfunctionListAccess().getStrjoinKeyword_2()); }
		'strjoin'
		{ after(grammarAccess.getStdfunctionListAccess().getStrjoinKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getStdfunctionListAccess().getStrsplitKeyword_3()); }
		'strsplit'
		{ after(grammarAccess.getStdfunctionListAccess().getStrsplitKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getStdfunctionListAccess().getAnytostrKeyword_4()); }
		'anytostr'
		{ after(grammarAccess.getStdfunctionListAccess().getAnytostrKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getStdfunctionListAccess().getGetargsKeyword_5()); }
		'getargs'
		{ after(grammarAccess.getStdfunctionListAccess().getGetargsKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getStdfunctionListAccess().getEqualsKeyword_6()); }
		'equals'
		{ after(grammarAccess.getStdfunctionListAccess().getEqualsKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getStdfunctionListAccess().getLengthKeyword_7()); }
		'length'
		{ after(grammarAccess.getStdfunctionListAccess().getLengthKeyword_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__DecimalAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDOUBLEAccess().getDecimalINTTerminalRuleCall_2_0_0()); }
		RULE_INT
		{ after(grammarAccess.getDOUBLEAccess().getDecimalINTTerminalRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDOUBLEAccess().getDecimalNUMTerminalRuleCall_2_0_1()); }
		RULE_NUM
		{ after(grammarAccess.getDOUBLEAccess().getDecimalNUMTerminalRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
		'=='
		{ after(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
		'!='
		{ after(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
		'>='
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
		'<='
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
		'>'
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
		'<'
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getOpPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getPlusOrMinusAccess().getOpPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getPlusOrMinusAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getAbstractMethodCallParserRuleCall_2()); }
		ruleAbstractMethodCall
		{ after(grammarAccess.getPrimaryAccess().getAbstractMethodCallParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getTerminalParserRuleCall_3()); }
		ruleTerminal
		{ after(grammarAccess.getPrimaryAccess().getTerminalParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getGroup_0()); }
		(rule__Terminal__Group_0__0)
		{ after(grammarAccess.getTerminalAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getGroup_1()); }
		(rule__Terminal__Group_1__0)
		{ after(grammarAccess.getTerminalAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getGroup_2()); }
		(rule__Terminal__Group_2__0)
		{ after(grammarAccess.getTerminalAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getGroup_3()); }
		(rule__Terminal__Group_3__0)
		{ after(grammarAccess.getTerminalAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getGroup_4()); }
		(rule__Terminal__Group_4__0)
		{ after(grammarAccess.getTerminalAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getGroup_5()); }
		(rule__Terminal__Group_5__0)
		{ after(grammarAccess.getTerminalAccess().getGroup_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__VarRefAlternatives_3_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getVarRefTrueKeyword_3_1_0_0()); }
		'true...'
		{ after(grammarAccess.getTerminalAccess().getVarRefTrueKeyword_3_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalAccess().getVarRefFalseKeyword_3_1_0_1()); }
		'false...'
		{ after(grammarAccess.getTerminalAccess().getVarRefFalseKeyword_3_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VaselinaProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VaselinaProgram__Group__0__Impl
	rule__VaselinaProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VaselinaProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVaselinaProgramAccess().getGlobalAssignment_0()); }
	(rule__VaselinaProgram__GlobalAssignment_0)*
	{ after(grammarAccess.getVaselinaProgramAccess().getGlobalAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VaselinaProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VaselinaProgram__Group__1__Impl
	rule__VaselinaProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VaselinaProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVaselinaProgramAccess().getFuncAssignment_1()); }
	(rule__VaselinaProgram__FuncAssignment_1)*
	{ after(grammarAccess.getVaselinaProgramAccess().getFuncAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VaselinaProgram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VaselinaProgram__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VaselinaProgram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVaselinaProgramAccess().getMainAssignment_2()); }
	(rule__VaselinaProgram__MainAssignment_2)
	{ after(grammarAccess.getVaselinaProgramAccess().getMainAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MainDeclared__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainDeclared__Group__0__Impl
	rule__MainDeclared__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainDeclaredAccess().getMainDeclaredAction_0()); }
	()
	{ after(grammarAccess.getMainDeclaredAccess().getMainDeclaredAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainDeclared__Group__1__Impl
	rule__MainDeclared__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainDeclaredAccess().getVaselinatorKeyword_1()); }
	'Vaselinator'
	{ after(grammarAccess.getMainDeclaredAccess().getVaselinatorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainDeclared__Group__2__Impl
	rule__MainDeclared__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainDeclaredAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
	'->'
	{ after(grammarAccess.getMainDeclaredAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainDeclared__Group__3__Impl
	rule__MainDeclared__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainDeclaredAccess().getBodyAssignment_3()); }
	(rule__MainDeclared__BodyAssignment_3)*
	{ after(grammarAccess.getMainDeclaredAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainDeclared__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainDeclaredAccess().getLessThanSignHyphenMinusKeyword_4()); }
	'<-'
	{ after(grammarAccess.getMainDeclaredAccess().getLessThanSignHyphenMinusKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarReturn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarReturn__Group__0__Impl
	rule__VarReturn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarReturn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarReturnAccess().getKeepKeyword_0()); }
	'keep'
	{ after(grammarAccess.getVarReturnAccess().getKeepKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarReturn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarReturn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarReturn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarReturnAccess().getRtnAssignment_1()); }
	(rule__VarReturn__RtnAssignment_1)
	{ after(grammarAccess.getVarReturnAccess().getRtnAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclared__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclared__Group__0__Impl
	rule__VarDeclared__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclaredAccess().getVarDeclaredAction_0()); }
	()
	{ after(grammarAccess.getVarDeclaredAccess().getVarDeclaredAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclared__Group__1__Impl
	rule__VarDeclared__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclaredAccess().getAlternatives_1()); }
	(rule__VarDeclared__Alternatives_1)
	{ after(grammarAccess.getVarDeclaredAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclared__Group__2__Impl
	rule__VarDeclared__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclaredAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getVarDeclaredAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclared__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclaredAccess().getTypeAssignment_3()); }
	(rule__VarDeclared__TypeAssignment_3)
	{ after(grammarAccess.getVarDeclaredAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclared__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclared__Group_1_0__0__Impl
	rule__VarDeclared__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclaredAccess().getScopeAssignment_1_0_0()); }
	(rule__VarDeclared__ScopeAssignment_1_0_0)
	{ after(grammarAccess.getVarDeclaredAccess().getScopeAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclared__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclaredAccess().getNameAssignment_1_0_1()); }
	(rule__VarDeclared__NameAssignment_1_0_1)
	{ after(grammarAccess.getVarDeclaredAccess().getNameAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclared__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclared__Group_1_1__0__Impl
	rule__VarDeclared__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclaredAccess().getScopeAssignment_1_1_0()); }
	(rule__VarDeclared__ScopeAssignment_1_1_0)
	{ after(grammarAccess.getVarDeclaredAccess().getScopeAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclared__Group_1_1__1__Impl
	rule__VarDeclared__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclaredAccess().getNameAssignment_1_1_1()); }
	(rule__VarDeclared__NameAssignment_1_1_1)
	{ after(grammarAccess.getVarDeclaredAccess().getNameAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclared__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getVarDeclaredAccess().getDimAssignment_1_1_2()); }
		(rule__VarDeclared__DimAssignment_1_1_2)
		{ after(grammarAccess.getVarDeclaredAccess().getDimAssignment_1_1_2()); }
	)
	(
		{ before(grammarAccess.getVarDeclaredAccess().getDimAssignment_1_1_2()); }
		(rule__VarDeclared__DimAssignment_1_1_2)*
		{ after(grammarAccess.getVarDeclaredAccess().getDimAssignment_1_1_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssignment__Group__0__Impl
	rule__VarAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignmentAccess().getVariableAssignment_0()); }
	(rule__VarAssignment__VariableAssignment_0)
	{ after(grammarAccess.getVarAssignmentAccess().getVariableAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssignment__Group__1__Impl
	rule__VarAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignmentAccess().getHoldsKeyword_1()); }
	'holds'
	{ after(grammarAccess.getVarAssignmentAccess().getHoldsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarAssignmentAccess().getExprAssignment_2()); }
	(rule__VarAssignment__ExprAssignment_2)
	{ after(grammarAccess.getVarAssignmentAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayRefs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayRefs__Group__0__Impl
	rule__ArrayRefs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRefs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayRefsAccess().getArrayRefsAction_0()); }
	()
	{ after(grammarAccess.getArrayRefsAccess().getArrayRefsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRefs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayRefs__Group__1__Impl
	rule__ArrayRefs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRefs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayRefsAccess().getArrRefsAssignment_1()); }
	(rule__ArrayRefs__ArrRefsAssignment_1)
	{ after(grammarAccess.getArrayRefsAccess().getArrRefsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRefs__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayRefs__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRefs__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getArrayRefsAccess().getDimsAssignment_2()); }
		(rule__ArrayRefs__DimsAssignment_2)
		{ after(grammarAccess.getArrayRefsAccess().getDimsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getArrayRefsAccess().getDimsAssignment_2()); }
		(rule__ArrayRefs__DimsAssignment_2)*
		{ after(grammarAccess.getArrayRefsAccess().getDimsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarRefs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarRefs__Group__0__Impl
	rule__VarRefs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarRefsAccess().getVarRefsAction_0()); }
	()
	{ after(grammarAccess.getVarRefsAccess().getVarRefsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarRefs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarRefsAccess().getVaRefsAssignment_1()); }
	(rule__VarRefs__VaRefsAssignment_1)
	{ after(grammarAccess.getVarRefsAccess().getVaRefsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayDimension__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDimension__Group__0__Impl
	rule__ArrayDimension__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDimensionAccess().getArrayDimensionAction_0()); }
	()
	{ after(grammarAccess.getArrayDimensionAccess().getArrayDimensionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDimension__Group__1__Impl
	rule__ArrayDimension__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDimensionAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getArrayDimensionAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDimension__Group__2__Impl
	rule__ArrayDimension__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDimensionAccess().getIndexAssignment_2()); }
	(rule__ArrayDimension__IndexAssignment_2)
	{ after(grammarAccess.getArrayDimensionAccess().getIndexAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayDimension__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayDimensionAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getArrayDimensionAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__0__Impl
	rule__FuncCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getFuncCallAction_0()); }
	()
	{ after(grammarAccess.getFuncCallAccess().getFuncCallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__1__Impl
	rule__FuncCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getFuncAssignment_1()); }
	(rule__FuncCall__FuncAssignment_1)
	{ after(grammarAccess.getFuncCallAccess().getFuncAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__2__Impl
	rule__FuncCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getUsingKeyword_2()); }
	'using'
	{ after(grammarAccess.getFuncCallAccess().getUsingKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__3__Impl
	rule__FuncCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getFuncCallAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__4__Impl
	rule__FuncCall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getGroup_4()); }
	(rule__FuncCall__Group_4__0)?
	{ after(grammarAccess.getFuncCallAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getFuncCallAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncCall__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group_4__0__Impl
	rule__FuncCall__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getArgsAssignment_4_0()); }
	(rule__FuncCall__ArgsAssignment_4_0)
	{ after(grammarAccess.getFuncCallAccess().getArgsAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getGroup_4_1()); }
	(rule__FuncCall__Group_4_1__0)*
	{ after(grammarAccess.getFuncCallAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncCall__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group_4_1__0__Impl
	rule__FuncCall__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getCommaKeyword_4_1_0()); }
	','
	{ after(grammarAccess.getFuncCallAccess().getCommaKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getArgsAssignment_4_1_1()); }
	(rule__FuncCall__ArgsAssignment_4_1_1)
	{ after(grammarAccess.getFuncCallAccess().getArgsAssignment_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__0__Impl
	rule__FuncDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getBrazeKeyword_0()); }
	'braze'
	{ after(grammarAccess.getFuncDefinitionAccess().getBrazeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__1__Impl
	rule__FuncDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getNameAssignment_1()); }
	(rule__FuncDefinition__NameAssignment_1)
	{ after(grammarAccess.getFuncDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__2__Impl
	rule__FuncDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getWithKeyword_2()); }
	'with'
	{ after(grammarAccess.getFuncDefinitionAccess().getWithKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__3__Impl
	rule__FuncDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getAlternatives_3()); }
	(rule__FuncDefinition__Alternatives_3)
	{ after(grammarAccess.getFuncDefinitionAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__4__Impl
	rule__FuncDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
	'->'
	{ after(grammarAccess.getFuncDefinitionAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__5__Impl
	rule__FuncDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getBodyAssignment_5()); }
	(rule__FuncDefinition__BodyAssignment_5)*
	{ after(grammarAccess.getFuncDefinitionAccess().getBodyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__6__Impl
	rule__FuncDefinition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getAndKeyword_6()); }
	'and'
	{ after(grammarAccess.getFuncDefinitionAccess().getAndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getVaselinaKeyword_7()); }
	'vaselina'
	{ after(grammarAccess.getFuncDefinitionAccess().getVaselinaKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDefinition__Group_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_3_0__0__Impl
	rule__FuncDefinition__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getArgsAssignment_3_0_0()); }
	(rule__FuncDefinition__ArgsAssignment_3_0_0)
	{ after(grammarAccess.getFuncDefinitionAccess().getArgsAssignment_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_3_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getGroup_3_0_1()); }
	(rule__FuncDefinition__Group_3_0_1__0)*
	{ after(grammarAccess.getFuncDefinitionAccess().getGroup_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDefinition__Group_3_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_3_0_1__0__Impl
	rule__FuncDefinition__Group_3_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getCommaKeyword_3_0_1_0()); }
	','
	{ after(grammarAccess.getFuncDefinitionAccess().getCommaKeyword_3_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDefinition__Group_3_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__Group_3_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDefinitionAccess().getArgsAssignment_3_0_1_1()); }
	(rule__FuncDefinition__ArgsAssignment_3_0_1_1)
	{ after(grammarAccess.getFuncDefinitionAccess().getArgsAssignment_3_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncTypedDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncTypedDeclaration__Group__0__Impl
	rule__FuncTypedDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTypedDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncTypedDeclarationAccess().getTypeAssignment_0()); }
	(rule__FuncTypedDeclaration__TypeAssignment_0)
	{ after(grammarAccess.getFuncTypedDeclarationAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTypedDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncTypedDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTypedDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncTypedDeclarationAccess().getNameAssignment_1()); }
	(rule__FuncTypedDeclaration__NameAssignment_1)
	{ after(grammarAccess.getFuncTypedDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StdFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group__0__Impl
	rule__StdFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getStdFunctionAction_0()); }
	()
	{ after(grammarAccess.getStdFunctionAccess().getStdFunctionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group__1__Impl
	rule__StdFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getNameAssignment_1()); }
	(rule__StdFunction__NameAssignment_1)
	{ after(grammarAccess.getStdFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group__2__Impl
	rule__StdFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getUsingKeyword_2()); }
	'using'
	{ after(grammarAccess.getStdFunctionAccess().getUsingKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group__3__Impl
	rule__StdFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getStdFunctionAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group__4__Impl
	rule__StdFunction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getGroup_4()); }
	(rule__StdFunction__Group_4__0)?
	{ after(grammarAccess.getStdFunctionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getStdFunctionAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StdFunction__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group_4__0__Impl
	rule__StdFunction__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getArgsAssignment_4_0()); }
	(rule__StdFunction__ArgsAssignment_4_0)
	{ after(grammarAccess.getStdFunctionAccess().getArgsAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getGroup_4_1()); }
	(rule__StdFunction__Group_4_1__0)*
	{ after(grammarAccess.getStdFunctionAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StdFunction__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group_4_1__0__Impl
	rule__StdFunction__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getCommaKeyword_4_1_0()); }
	','
	{ after(grammarAccess.getStdFunctionAccess().getCommaKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StdFunction__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStdFunctionAccess().getArgsAssignment_4_1_1()); }
	(rule__StdFunction__ArgsAssignment_4_1_1)
	{ after(grammarAccess.getStdFunctionAccess().getArgsAssignment_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__0__Impl
	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getIfExpressionAction_0()); }
	()
	{ after(grammarAccess.getIfExpressionAccess().getIfExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__1__Impl
	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getIsKeyword_1()); }
	'is'
	{ after(grammarAccess.getIfExpressionAccess().getIsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__2__Impl
	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getThisKeyword_2()); }
	'this'
	{ after(grammarAccess.getIfExpressionAccess().getThisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__3__Impl
	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getTrueKeyword_3()); }
	'true?'
	{ after(grammarAccess.getIfExpressionAccess().getTrueKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__4__Impl
	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getIfExpressionAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__5__Impl
	rule__IfExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getIfconditonAssignment_5()); }
	(rule__IfExpression__IfconditonAssignment_5)
	{ after(grammarAccess.getIfExpressionAccess().getIfconditonAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__6__Impl
	rule__IfExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getIfExpressionAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__7__Impl
	rule__IfExpression__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getYesKeyword_7()); }
	'yes'
	{ after(grammarAccess.getIfExpressionAccess().getYesKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__8__Impl
	rule__IfExpression__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getHyphenMinusGreaterThanSignKeyword_8()); }
	'->'
	{ after(grammarAccess.getIfExpressionAccess().getHyphenMinusGreaterThanSignKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__9__Impl
	rule__IfExpression__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getThenAssignment_9()); }
	(rule__IfExpression__ThenAssignment_9)*
	{ after(grammarAccess.getIfExpressionAccess().getThenAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__10__Impl
	rule__IfExpression__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getGroup_10()); }
	(rule__IfExpression__Group_10__0)?
	{ after(grammarAccess.getIfExpressionAccess().getGroup_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getLessThanSignHyphenMinusKeyword_11()); }
	('<-')
	{ after(grammarAccess.getIfExpressionAccess().getLessThanSignHyphenMinusKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group_10__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_10__0__Impl
	rule__IfExpression__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_10__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getLessThanSignHyphenMinusKeyword_10_0()); }
	('<-')
	{ after(grammarAccess.getIfExpressionAccess().getLessThanSignHyphenMinusKeyword_10_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_10__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_10__1__Impl
	rule__IfExpression__Group_10__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_10__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getNoKeyword_10_1()); }
	'no'
	{ after(grammarAccess.getIfExpressionAccess().getNoKeyword_10_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_10__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_10__2__Impl
	rule__IfExpression__Group_10__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_10__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getHyphenMinusGreaterThanSignKeyword_10_2()); }
	'->'
	{ after(grammarAccess.getIfExpressionAccess().getHyphenMinusGreaterThanSignKeyword_10_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_10__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_10__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_10__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getElseAssignment_10_3()); }
	(rule__IfExpression__ElseAssignment_10_3)*
	{ after(grammarAccess.getIfExpressionAccess().getElseAssignment_10_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__0__Impl
	rule__DoWhileExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getDoWhileExpressionAction_0()); }
	()
	{ after(grammarAccess.getDoWhileExpressionAccess().getDoWhileExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__1__Impl
	rule__DoWhileExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getAsKeyword_1()); }
	'as'
	{ after(grammarAccess.getDoWhileExpressionAccess().getAsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__2__Impl
	rule__DoWhileExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getLongKeyword_2()); }
	'long'
	{ after(grammarAccess.getDoWhileExpressionAccess().getLongKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__3__Impl
	rule__DoWhileExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getAsKeyword_3()); }
	'as'
	{ after(grammarAccess.getDoWhileExpressionAccess().getAsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__4__Impl
	rule__DoWhileExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getDoWhileExpressionAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__5__Impl
	rule__DoWhileExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getLoopConditonAssignment_5()); }
	(rule__DoWhileExpression__LoopConditonAssignment_5)
	{ after(grammarAccess.getDoWhileExpressionAccess().getLoopConditonAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__6__Impl
	rule__DoWhileExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getDoWhileExpressionAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__7__Impl
	rule__DoWhileExpression__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getRepeatKeyword_7()); }
	'repeat'
	{ after(grammarAccess.getDoWhileExpressionAccess().getRepeatKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__8__Impl
	rule__DoWhileExpression__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getHyphenMinusGreaterThanSignKeyword_8()); }
	'->'
	{ after(grammarAccess.getDoWhileExpressionAccess().getHyphenMinusGreaterThanSignKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__9__Impl
	rule__DoWhileExpression__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getBodyAssignment_9()); }
	(rule__DoWhileExpression__BodyAssignment_9)*
	{ after(grammarAccess.getDoWhileExpressionAccess().getBodyAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DoWhileExpression__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoWhileExpressionAccess().getLessThanSignHyphenMinusKeyword_10()); }
	('<-')
	{ after(grammarAccess.getDoWhileExpressionAccess().getLessThanSignHyphenMinusKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BrkStr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BrkStr__Group__0__Impl
	rule__BrkStr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BrkStr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrkStrAccess().getBrkStrAction_0()); }
	()
	{ after(grammarAccess.getBrkStrAccess().getBrkStrAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BrkStr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BrkStr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BrkStr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrkStrAccess().getBrkAssignment_1()); }
	(rule__BrkStr__BrkAssignment_1)
	{ after(grammarAccess.getBrkStrAccess().getBrkAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnDeclaration__Group__0__Impl
	rule__ReturnDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnDeclarationAccess().getTypeKeyword_0()); }
	'type'
	{ after(grammarAccess.getReturnDeclarationAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnDeclaration__Group__1__Impl
	rule__ReturnDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnDeclarationAccess().getKeepingKeyword_1()); }
	'keeping'
	{ after(grammarAccess.getReturnDeclarationAccess().getKeepingKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnDeclarationAccess().getRtnTypeAssignment_2()); }
	(rule__ReturnDeclaration__RtnTypeAssignment_2)
	{ after(grammarAccess.getReturnDeclarationAccess().getRtnTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DOUBLE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOUBLE__Group__0__Impl
	rule__DOUBLE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOUBLEAccess().getIntegerAssignment_0()); }
	(rule__DOUBLE__IntegerAssignment_0)
	{ after(grammarAccess.getDOUBLEAccess().getIntegerAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOUBLE__Group__1__Impl
	rule__DOUBLE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOUBLEAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getDOUBLEAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DOUBLE__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDOUBLEAccess().getDecimalAssignment_2()); }
	(rule__DOUBLE__DecimalAssignment_2)
	{ after(grammarAccess.getDOUBLEAccess().getDecimalAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOpAssignment_1_1()); }
	(rule__Or__OpAssignment_1_1)
	{ after(grammarAccess.getOrAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
	ruleEquality
	{ after(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getOpAssignment_1_1()); }
	(rule__And__OpAssignment_1_1)
	{ after(grammarAccess.getAndAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getGroup_1()); }
	(rule__Equality__Group_1__0)*
	{ after(grammarAccess.getEqualityAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__0__Impl
	rule__Equality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__1__Impl
	rule__Equality__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
	(rule__Equality__OpAssignment_1_1)
	{ after(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
	(rule__Equality__RightAssignment_1_2)
	{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
	rulePlusOrMinus
	{ after(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
	(rule__Comparison__OpAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
	(rule__Comparison__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__0__Impl
	rule__PlusOrMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
	ruleMulOrDiv
	{ after(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
	(rule__PlusOrMinus__Group_1__0)*
	{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__0__Impl
	rule__PlusOrMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getPlusOrMinusLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPlusOrMinusAccess().getPlusOrMinusLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__1__Impl
	rule__PlusOrMinus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getOpAssignment_1_1()); }
	(rule__PlusOrMinus__OpAssignment_1_1)
	{ after(grammarAccess.getPlusOrMinusAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_2()); }
	(rule__PlusOrMinus__RightAssignment_1_2)
	{ after(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group__0__Impl
	rule__MulOrDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getModuleParserRuleCall_0()); }
	ruleModule
	{ after(grammarAccess.getMulOrDivAccess().getModuleParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getGroup_1()); }
	(rule__MulOrDiv__Group_1__0)*
	{ after(grammarAccess.getMulOrDivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__0__Impl
	rule__MulOrDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__1__Impl
	rule__MulOrDiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
	(rule__MulOrDiv__OpAssignment_1_1)
	{ after(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
	(rule__MulOrDiv__RightAssignment_1_2)
	{ after(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getModuleAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getGroup_1()); }
	(rule__Module__Group_1__0)*
	{ after(grammarAccess.getModuleAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_1__0__Impl
	rule__Module__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getModuleLeftAction_1_0()); }
	()
	{ after(grammarAccess.getModuleAccess().getModuleLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_1__1__Impl
	rule__Module__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getOpAssignment_1_1()); }
	(rule__Module__OpAssignment_1_1)
	{ after(grammarAccess.getModuleAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Module__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModuleAccess().getRightAssignment_1_2()); }
	(rule__Module__RightAssignment_1_2)
	{ after(grammarAccess.getModuleAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getInsideAction_0_1()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getInsideAction_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__2__Impl
	rule__Primary__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getInsideAssignment_0_2()); }
	(rule__Primary__InsideAssignment_0_2)
	{ after(grammarAccess.getPrimaryAccess().getInsideAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_3()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }
	'!'
	{ after(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
	(rule__Primary__ExpressionAssignment_1_2)
	{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_0__0__Impl
	rule__Terminal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getStringRefAction_0_0()); }
	()
	{ after(grammarAccess.getTerminalAccess().getStringRefAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getValueAssignment_0_1()); }
	(rule__Terminal__ValueAssignment_0_1)
	{ after(grammarAccess.getTerminalAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_1__0__Impl
	rule__Terminal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getNumRefAction_1_0()); }
	()
	{ after(grammarAccess.getTerminalAccess().getNumRefAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getValueAssignment_1_1()); }
	(rule__Terminal__ValueAssignment_1_1)
	{ after(grammarAccess.getTerminalAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_2__0__Impl
	rule__Terminal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getDoubleRefAction_2_0()); }
	()
	{ after(grammarAccess.getTerminalAccess().getDoubleRefAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getValueAssignment_2_1()); }
	(rule__Terminal__ValueAssignment_2_1)
	{ after(grammarAccess.getTerminalAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_3__0__Impl
	rule__Terminal__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getBoolRefAction_3_0()); }
	()
	{ after(grammarAccess.getTerminalAccess().getBoolRefAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getVarRefAssignment_3_1()); }
	(rule__Terminal__VarRefAssignment_3_1)
	{ after(grammarAccess.getTerminalAccess().getVarRefAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_4__0__Impl
	rule__Terminal__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getVarRefAction_4_0()); }
	()
	{ after(grammarAccess.getTerminalAccess().getVarRefAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getVarRefAssignment_4_1()); }
	(rule__Terminal__VarRefAssignment_4_1)
	{ after(grammarAccess.getTerminalAccess().getVarRefAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Terminal__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_5__0__Impl
	rule__Terminal__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getArrayRefAction_5_0()); }
	()
	{ after(grammarAccess.getTerminalAccess().getArrayRefAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_5__1__Impl
	rule__Terminal__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalAccess().getVarRefAssignment_5_1()); }
	(rule__Terminal__VarRefAssignment_5_1)
	{ after(grammarAccess.getTerminalAccess().getVarRefAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Terminal__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTerminalAccess().getDimAssignment_5_2()); }
		(rule__Terminal__DimAssignment_5_2)
		{ after(grammarAccess.getTerminalAccess().getDimAssignment_5_2()); }
	)
	(
		{ before(grammarAccess.getTerminalAccess().getDimAssignment_5_2()); }
		(rule__Terminal__DimAssignment_5_2)*
		{ after(grammarAccess.getTerminalAccess().getDimAssignment_5_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VaselinaProgram__GlobalAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVaselinaProgramAccess().getGlobalVarDeclaredParserRuleCall_0_0()); }
		rulevarDeclared
		{ after(grammarAccess.getVaselinaProgramAccess().getGlobalVarDeclaredParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VaselinaProgram__FuncAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVaselinaProgramAccess().getFuncFuncDefinitionParserRuleCall_1_0()); }
		ruleFuncDefinition
		{ after(grammarAccess.getVaselinaProgramAccess().getFuncFuncDefinitionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VaselinaProgram__MainAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVaselinaProgramAccess().getMainMainDeclaredParserRuleCall_2_0()); }
		rulemainDeclared
		{ after(grammarAccess.getVaselinaProgramAccess().getMainMainDeclaredParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainDeclared__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainDeclaredAccess().getBodyBodyStatementParserRuleCall_3_0()); }
		ruleBodyStatement
		{ after(grammarAccess.getMainDeclaredAccess().getBodyBodyStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarReturn__RtnAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarReturnAccess().getRtnVarExpressionParserRuleCall_1_0()); }
		rulevarExpression
		{ after(grammarAccess.getVarReturnAccess().getRtnVarExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__ScopeAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclaredAccess().getScopeBoxKeyword_1_0_0_0()); }
		(
			{ before(grammarAccess.getVarDeclaredAccess().getScopeBoxKeyword_1_0_0_0()); }
			'box'
			{ after(grammarAccess.getVarDeclaredAccess().getScopeBoxKeyword_1_0_0_0()); }
		)
		{ after(grammarAccess.getVarDeclaredAccess().getScopeBoxKeyword_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__NameAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclaredAccess().getNameIDTerminalRuleCall_1_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarDeclaredAccess().getNameIDTerminalRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__ScopeAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclaredAccess().getScopeBoxesKeyword_1_1_0_0()); }
		(
			{ before(grammarAccess.getVarDeclaredAccess().getScopeBoxesKeyword_1_1_0_0()); }
			'boxes'
			{ after(grammarAccess.getVarDeclaredAccess().getScopeBoxesKeyword_1_1_0_0()); }
		)
		{ after(grammarAccess.getVarDeclaredAccess().getScopeBoxesKeyword_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__NameAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclaredAccess().getNameIDTerminalRuleCall_1_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarDeclaredAccess().getNameIDTerminalRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__DimAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclaredAccess().getDimArrayDimensionParserRuleCall_1_1_2_0()); }
		rulearrayDimension
		{ after(grammarAccess.getVarDeclaredAccess().getDimArrayDimensionParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclared__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclaredAccess().getTypeVarTypeLiteralParserRuleCall_3_0()); }
		rulevarTypeLiteral
		{ after(grammarAccess.getVarDeclaredAccess().getTypeVarTypeLiteralParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__VariableAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAssignmentAccess().getVariableVariableParserRuleCall_0_0()); }
		ruleVariable
		{ after(grammarAccess.getVarAssignmentAccess().getVariableVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarAssignment__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarAssignmentAccess().getExprVarExpressionParserRuleCall_2_0()); }
		rulevarExpression
		{ after(grammarAccess.getVarAssignmentAccess().getExprVarExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRefs__ArrRefsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayRefsAccess().getArrRefsVarSymbolCrossReference_1_0()); }
		(
			{ before(grammarAccess.getArrayRefsAccess().getArrRefsVarSymbolIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getArrayRefsAccess().getArrRefsVarSymbolIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getArrayRefsAccess().getArrRefsVarSymbolCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayRefs__DimsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayRefsAccess().getDimsArrayDimensionParserRuleCall_2_0()); }
		rulearrayDimension
		{ after(grammarAccess.getArrayRefsAccess().getDimsArrayDimensionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarRefs__VaRefsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarRefsAccess().getVaRefsVarSymbolCrossReference_1_0()); }
		(
			{ before(grammarAccess.getVarRefsAccess().getVaRefsVarSymbolIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVarRefsAccess().getVaRefsVarSymbolIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getVarRefsAccess().getVaRefsVarSymbolCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayDimension__IndexAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayDimensionAccess().getIndexTerminalParserRuleCall_2_0()); }
		ruleTerminal
		{ after(grammarAccess.getArrayDimensionAccess().getIndexTerminalParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__FuncAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncCallAccess().getFuncFuncDefinitionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFuncCallAccess().getFuncFuncDefinitionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFuncCallAccess().getFuncFuncDefinitionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFuncCallAccess().getFuncFuncDefinitionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__ArgsAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncCallAccess().getArgsVarExpressionParserRuleCall_4_0_0()); }
		rulevarExpression
		{ after(grammarAccess.getFuncCallAccess().getArgsVarExpressionParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__ArgsAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncCallAccess().getArgsVarExpressionParserRuleCall_4_1_1_0()); }
		rulevarExpression
		{ after(grammarAccess.getFuncCallAccess().getArgsVarExpressionParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFuncDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__ArgsAssignment_3_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getArgsFuncParameterParserRuleCall_3_0_0_0()); }
		ruleFuncParameter
		{ after(grammarAccess.getFuncDefinitionAccess().getArgsFuncParameterParserRuleCall_3_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__ArgsAssignment_3_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getArgsFuncParameterParserRuleCall_3_0_1_1_0()); }
		ruleFuncParameter
		{ after(grammarAccess.getFuncDefinitionAccess().getArgsFuncParameterParserRuleCall_3_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDefinition__BodyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDefinitionAccess().getBodyBodyStatementParserRuleCall_5_0()); }
		ruleBodyStatement
		{ after(grammarAccess.getFuncDefinitionAccess().getBodyBodyStatementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTypedDeclaration__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncTypedDeclarationAccess().getTypeVarTypeLiteralParserRuleCall_0_0()); }
		rulevarTypeLiteral
		{ after(grammarAccess.getFuncTypedDeclarationAccess().getTypeVarTypeLiteralParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncTypedDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncTypedDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFuncTypedDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStdFunctionAccess().getNameStdfunctionListParserRuleCall_1_0()); }
		ruleStdfunctionList
		{ after(grammarAccess.getStdFunctionAccess().getNameStdfunctionListParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__ArgsAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStdFunctionAccess().getArgsVarExpressionParserRuleCall_4_0_0()); }
		rulevarExpression
		{ after(grammarAccess.getStdFunctionAccess().getArgsVarExpressionParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StdFunction__ArgsAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStdFunctionAccess().getArgsVarExpressionParserRuleCall_4_1_1_0()); }
		rulevarExpression
		{ after(grammarAccess.getStdFunctionAccess().getArgsVarExpressionParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__IfconditonAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getIfconditonVarExpressionParserRuleCall_5_0()); }
		rulevarExpression
		{ after(grammarAccess.getIfExpressionAccess().getIfconditonVarExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ThenAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getThenBodyStatementParserRuleCall_9_0()); }
		ruleBodyStatement
		{ after(grammarAccess.getIfExpressionAccess().getThenBodyStatementParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ElseAssignment_10_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getElseBodyStatementParserRuleCall_10_3_0()); }
		ruleBodyStatement
		{ after(grammarAccess.getIfExpressionAccess().getElseBodyStatementParserRuleCall_10_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__LoopConditonAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoWhileExpressionAccess().getLoopConditonVarExpressionParserRuleCall_5_0()); }
		rulevarExpression
		{ after(grammarAccess.getDoWhileExpressionAccess().getLoopConditonVarExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileExpression__BodyAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoWhileExpressionAccess().getBodyBodyStatementParserRuleCall_9_0()); }
		ruleBodyStatement
		{ after(grammarAccess.getDoWhileExpressionAccess().getBodyBodyStatementParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BrkStr__BrkAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrkStrAccess().getBrkBreakKeyword_1_0()); }
		(
			{ before(grammarAccess.getBrkStrAccess().getBrkBreakKeyword_1_0()); }
			'break'
			{ after(grammarAccess.getBrkStrAccess().getBrkBreakKeyword_1_0()); }
		)
		{ after(grammarAccess.getBrkStrAccess().getBrkBreakKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnDeclaration__RtnTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnDeclarationAccess().getRtnTypeVarTypeLiteralParserRuleCall_2_0()); }
		rulevarTypeLiteral
		{ after(grammarAccess.getReturnDeclarationAccess().getRtnTypeVarTypeLiteralParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__IntegerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDOUBLEAccess().getIntegerNUMTerminalRuleCall_0_0()); }
		RULE_NUM
		{ after(grammarAccess.getDOUBLEAccess().getIntegerNUMTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DOUBLE__DecimalAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDOUBLEAccess().getDecimalAlternatives_2_0()); }
		(rule__DOUBLE__DecimalAlternatives_2_0)
		{ after(grammarAccess.getDOUBLEAccess().getDecimalAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
			'||'
			{ after(grammarAccess.getOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getOrAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getAndAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
			'&&'
			{ after(grammarAccess.getAndAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getAndAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
		ruleEquality
		{ after(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
		(rule__Equality__OpAlternatives_1_1_0)
		{ after(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
		(rule__Comparison__OpAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
		rulePlusOrMinus
		{ after(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getOpAlternatives_1_1_0()); }
		(rule__PlusOrMinus__OpAlternatives_1_1_0)
		{ after(grammarAccess.getPlusOrMinusAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_2_0()); }
		ruleMulOrDiv
		{ after(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
		(rule__MulOrDiv__OpAlternatives_1_1_0)
		{ after(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getRightModuleParserRuleCall_1_2_0()); }
		ruleModule
		{ after(grammarAccess.getMulOrDivAccess().getRightModuleParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getOpPercentSignKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getModuleAccess().getOpPercentSignKeyword_1_1_0()); }
			'%'
			{ after(grammarAccess.getModuleAccess().getOpPercentSignKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getModuleAccess().getOpPercentSignKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModuleAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getModuleAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__InsideAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getInsideVarExpressionParserRuleCall_0_2_0()); }
		rulevarExpression
		{ after(grammarAccess.getPrimaryAccess().getInsideVarExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getValueSTRINGTerminalRuleCall_0_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTerminalAccess().getValueSTRINGTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getValueNUMTerminalRuleCall_1_1_0()); }
		RULE_NUM
		{ after(grammarAccess.getTerminalAccess().getValueNUMTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getValueDOUBLEParserRuleCall_2_1_0()); }
		ruleDOUBLE
		{ after(grammarAccess.getTerminalAccess().getValueDOUBLEParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__VarRefAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getVarRefAlternatives_3_1_0()); }
		(rule__Terminal__VarRefAlternatives_3_1_0)
		{ after(grammarAccess.getTerminalAccess().getVarRefAlternatives_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__VarRefAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getVarRefVarSymbolCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getTerminalAccess().getVarRefVarSymbolIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTerminalAccess().getVarRefVarSymbolIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getTerminalAccess().getVarRefVarSymbolCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__VarRefAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getVarRefVarSymbolCrossReference_5_1_0()); }
		(
			{ before(grammarAccess.getTerminalAccess().getVarRefVarSymbolIDTerminalRuleCall_5_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTerminalAccess().getVarRefVarSymbolIDTerminalRuleCall_5_1_0_1()); }
		)
		{ after(grammarAccess.getTerminalAccess().getVarRefVarSymbolCrossReference_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Terminal__DimAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalAccess().getDimArrayDimensionParserRuleCall_5_2_0()); }
		rulearrayDimension
		{ after(grammarAccess.getTerminalAccess().getDimArrayDimensionParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NUM : ('1'..'9' ('0'..'9')*|'0');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
