/*
 * generated by Xtext 2.27.0-SNAPSHOT
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalVaselinaParser;
import org.xtext.example.mydsl.services.VaselinaGrammarAccess;

public class VaselinaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(VaselinaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, VaselinaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBodyStatementAccess().getAlternatives(), "rule__BodyStatement__Alternatives");
			builder.put(grammarAccess.getVarTypeLiteralAccess().getAlternatives(), "rule__VarTypeLiteral__Alternatives");
			builder.put(grammarAccess.getVarDeclaredAccess().getAlternatives_1(), "rule__VarDeclared__Alternatives_1");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getVarSymbolAccess().getAlternatives(), "rule__VarSymbol__Alternatives");
			builder.put(grammarAccess.getFuncDefinitionAccess().getAlternatives_3(), "rule__FuncDefinition__Alternatives_3");
			builder.put(grammarAccess.getAbstractMethodCallAccess().getAlternatives(), "rule__AbstractMethodCall__Alternatives");
			builder.put(grammarAccess.getStdfunctionListAccess().getAlternatives(), "rule__StdfunctionList__Alternatives");
			builder.put(grammarAccess.getDOUBLEAccess().getDecimalAlternatives_2_0(), "rule__DOUBLE__DecimalAlternatives_2_0");
			builder.put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getOpAlternatives_1_1_0(), "rule__PlusOrMinus__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0(), "rule__MulOrDiv__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getTerminalAccess().getAlternatives(), "rule__Terminal__Alternatives");
			builder.put(grammarAccess.getTerminalAccess().getVarRefAlternatives_3_1_0(), "rule__Terminal__VarRefAlternatives_3_1_0");
			builder.put(grammarAccess.getVaselinaProgramAccess().getGroup(), "rule__VaselinaProgram__Group__0");
			builder.put(grammarAccess.getMainDeclaredAccess().getGroup(), "rule__MainDeclared__Group__0");
			builder.put(grammarAccess.getVarReturnAccess().getGroup(), "rule__VarReturn__Group__0");
			builder.put(grammarAccess.getVarDeclaredAccess().getGroup(), "rule__VarDeclared__Group__0");
			builder.put(grammarAccess.getVarDeclaredAccess().getGroup_1_0(), "rule__VarDeclared__Group_1_0__0");
			builder.put(grammarAccess.getVarDeclaredAccess().getGroup_1_1(), "rule__VarDeclared__Group_1_1__0");
			builder.put(grammarAccess.getVarAssignmentAccess().getGroup(), "rule__VarAssignment__Group__0");
			builder.put(grammarAccess.getArrayRefsAccess().getGroup(), "rule__ArrayRefs__Group__0");
			builder.put(grammarAccess.getVarRefsAccess().getGroup(), "rule__VarRefs__Group__0");
			builder.put(grammarAccess.getArrayDimensionAccess().getGroup(), "rule__ArrayDimension__Group__0");
			builder.put(grammarAccess.getFuncCallAccess().getGroup(), "rule__FuncCall__Group__0");
			builder.put(grammarAccess.getFuncCallAccess().getGroup_4(), "rule__FuncCall__Group_4__0");
			builder.put(grammarAccess.getFuncCallAccess().getGroup_4_1(), "rule__FuncCall__Group_4_1__0");
			builder.put(grammarAccess.getFuncDefinitionAccess().getGroup(), "rule__FuncDefinition__Group__0");
			builder.put(grammarAccess.getFuncDefinitionAccess().getGroup_3_0(), "rule__FuncDefinition__Group_3_0__0");
			builder.put(grammarAccess.getFuncDefinitionAccess().getGroup_3_0_1(), "rule__FuncDefinition__Group_3_0_1__0");
			builder.put(grammarAccess.getFuncTypedDeclarationAccess().getGroup(), "rule__FuncTypedDeclaration__Group__0");
			builder.put(grammarAccess.getStdFunctionAccess().getGroup(), "rule__StdFunction__Group__0");
			builder.put(grammarAccess.getStdFunctionAccess().getGroup_4(), "rule__StdFunction__Group_4__0");
			builder.put(grammarAccess.getStdFunctionAccess().getGroup_4_1(), "rule__StdFunction__Group_4_1__0");
			builder.put(grammarAccess.getIfExpressionAccess().getGroup(), "rule__IfExpression__Group__0");
			builder.put(grammarAccess.getIfExpressionAccess().getGroup_10(), "rule__IfExpression__Group_10__0");
			builder.put(grammarAccess.getDoWhileExpressionAccess().getGroup(), "rule__DoWhileExpression__Group__0");
			builder.put(grammarAccess.getBrkStrAccess().getGroup(), "rule__BrkStr__Group__0");
			builder.put(grammarAccess.getReturnDeclarationAccess().getGroup(), "rule__ReturnDeclaration__Group__0");
			builder.put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
			builder.put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
			builder.put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
			builder.put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
			builder.put(grammarAccess.getModuleAccess().getGroup_1(), "rule__Module__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getTerminalAccess().getGroup_0(), "rule__Terminal__Group_0__0");
			builder.put(grammarAccess.getTerminalAccess().getGroup_1(), "rule__Terminal__Group_1__0");
			builder.put(grammarAccess.getTerminalAccess().getGroup_2(), "rule__Terminal__Group_2__0");
			builder.put(grammarAccess.getTerminalAccess().getGroup_3(), "rule__Terminal__Group_3__0");
			builder.put(grammarAccess.getTerminalAccess().getGroup_4(), "rule__Terminal__Group_4__0");
			builder.put(grammarAccess.getTerminalAccess().getGroup_5(), "rule__Terminal__Group_5__0");
			builder.put(grammarAccess.getVaselinaProgramAccess().getGlobalAssignment_0(), "rule__VaselinaProgram__GlobalAssignment_0");
			builder.put(grammarAccess.getVaselinaProgramAccess().getFuncAssignment_1(), "rule__VaselinaProgram__FuncAssignment_1");
			builder.put(grammarAccess.getVaselinaProgramAccess().getMainAssignment_2(), "rule__VaselinaProgram__MainAssignment_2");
			builder.put(grammarAccess.getMainDeclaredAccess().getBodyAssignment_3(), "rule__MainDeclared__BodyAssignment_3");
			builder.put(grammarAccess.getVarReturnAccess().getRtnAssignment_1(), "rule__VarReturn__RtnAssignment_1");
			builder.put(grammarAccess.getVarDeclaredAccess().getScopeAssignment_1_0_0(), "rule__VarDeclared__ScopeAssignment_1_0_0");
			builder.put(grammarAccess.getVarDeclaredAccess().getNameAssignment_1_0_1(), "rule__VarDeclared__NameAssignment_1_0_1");
			builder.put(grammarAccess.getVarDeclaredAccess().getScopeAssignment_1_1_0(), "rule__VarDeclared__ScopeAssignment_1_1_0");
			builder.put(grammarAccess.getVarDeclaredAccess().getNameAssignment_1_1_1(), "rule__VarDeclared__NameAssignment_1_1_1");
			builder.put(grammarAccess.getVarDeclaredAccess().getDimAssignment_1_1_2(), "rule__VarDeclared__DimAssignment_1_1_2");
			builder.put(grammarAccess.getVarDeclaredAccess().getTypeAssignment_3(), "rule__VarDeclared__TypeAssignment_3");
			builder.put(grammarAccess.getVarAssignmentAccess().getVariableAssignment_0(), "rule__VarAssignment__VariableAssignment_0");
			builder.put(grammarAccess.getVarAssignmentAccess().getExprAssignment_2(), "rule__VarAssignment__ExprAssignment_2");
			builder.put(grammarAccess.getArrayRefsAccess().getArrRefsAssignment_1(), "rule__ArrayRefs__ArrRefsAssignment_1");
			builder.put(grammarAccess.getArrayRefsAccess().getDimsAssignment_2(), "rule__ArrayRefs__DimsAssignment_2");
			builder.put(grammarAccess.getVarRefsAccess().getVaRefsAssignment_1(), "rule__VarRefs__VaRefsAssignment_1");
			builder.put(grammarAccess.getArrayDimensionAccess().getIndexAssignment_2(), "rule__ArrayDimension__IndexAssignment_2");
			builder.put(grammarAccess.getFuncCallAccess().getFuncAssignment_1(), "rule__FuncCall__FuncAssignment_1");
			builder.put(grammarAccess.getFuncCallAccess().getArgsAssignment_4_0(), "rule__FuncCall__ArgsAssignment_4_0");
			builder.put(grammarAccess.getFuncCallAccess().getArgsAssignment_4_1_1(), "rule__FuncCall__ArgsAssignment_4_1_1");
			builder.put(grammarAccess.getFuncDefinitionAccess().getNameAssignment_1(), "rule__FuncDefinition__NameAssignment_1");
			builder.put(grammarAccess.getFuncDefinitionAccess().getArgsAssignment_3_0_0(), "rule__FuncDefinition__ArgsAssignment_3_0_0");
			builder.put(grammarAccess.getFuncDefinitionAccess().getArgsAssignment_3_0_1_1(), "rule__FuncDefinition__ArgsAssignment_3_0_1_1");
			builder.put(grammarAccess.getFuncDefinitionAccess().getBodyAssignment_5(), "rule__FuncDefinition__BodyAssignment_5");
			builder.put(grammarAccess.getFuncTypedDeclarationAccess().getTypeAssignment_0(), "rule__FuncTypedDeclaration__TypeAssignment_0");
			builder.put(grammarAccess.getFuncTypedDeclarationAccess().getNameAssignment_1(), "rule__FuncTypedDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getStdFunctionAccess().getNameAssignment_1(), "rule__StdFunction__NameAssignment_1");
			builder.put(grammarAccess.getStdFunctionAccess().getArgsAssignment_4_0(), "rule__StdFunction__ArgsAssignment_4_0");
			builder.put(grammarAccess.getStdFunctionAccess().getArgsAssignment_4_1_1(), "rule__StdFunction__ArgsAssignment_4_1_1");
			builder.put(grammarAccess.getIfExpressionAccess().getIfconditonAssignment_5(), "rule__IfExpression__IfconditonAssignment_5");
			builder.put(grammarAccess.getIfExpressionAccess().getThenAssignment_9(), "rule__IfExpression__ThenAssignment_9");
			builder.put(grammarAccess.getIfExpressionAccess().getElseAssignment_10_3(), "rule__IfExpression__ElseAssignment_10_3");
			builder.put(grammarAccess.getDoWhileExpressionAccess().getLoopConditonAssignment_5(), "rule__DoWhileExpression__LoopConditonAssignment_5");
			builder.put(grammarAccess.getDoWhileExpressionAccess().getBodyAssignment_9(), "rule__DoWhileExpression__BodyAssignment_9");
			builder.put(grammarAccess.getBrkStrAccess().getBrkAssignment_1(), "rule__BrkStr__BrkAssignment_1");
			builder.put(grammarAccess.getReturnDeclarationAccess().getRtnTypeAssignment_2(), "rule__ReturnDeclaration__RtnTypeAssignment_2");
			builder.put(grammarAccess.getDOUBLEAccess().getIntegerAssignment_0(), "rule__DOUBLE__IntegerAssignment_0");
			builder.put(grammarAccess.getDOUBLEAccess().getDecimalAssignment_2(), "rule__DOUBLE__DecimalAssignment_2");
			builder.put(grammarAccess.getOrAccess().getOpAssignment_1_1(), "rule__Or__OpAssignment_1_1");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
			builder.put(grammarAccess.getAndAccess().getOpAssignment_1_1(), "rule__And__OpAssignment_1_1");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
			builder.put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
			builder.put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusOrMinusAccess().getOpAssignment_1_1(), "rule__PlusOrMinus__OpAssignment_1_1");
			builder.put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_2(), "rule__PlusOrMinus__RightAssignment_1_2");
			builder.put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1(), "rule__MulOrDiv__OpAssignment_1_1");
			builder.put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2(), "rule__MulOrDiv__RightAssignment_1_2");
			builder.put(grammarAccess.getModuleAccess().getOpAssignment_1_1(), "rule__Module__OpAssignment_1_1");
			builder.put(grammarAccess.getModuleAccess().getRightAssignment_1_2(), "rule__Module__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getInsideAssignment_0_2(), "rule__Primary__InsideAssignment_0_2");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getTerminalAccess().getValueAssignment_0_1(), "rule__Terminal__ValueAssignment_0_1");
			builder.put(grammarAccess.getTerminalAccess().getValueAssignment_1_1(), "rule__Terminal__ValueAssignment_1_1");
			builder.put(grammarAccess.getTerminalAccess().getValueAssignment_2_1(), "rule__Terminal__ValueAssignment_2_1");
			builder.put(grammarAccess.getTerminalAccess().getVarRefAssignment_3_1(), "rule__Terminal__VarRefAssignment_3_1");
			builder.put(grammarAccess.getTerminalAccess().getVarRefAssignment_4_1(), "rule__Terminal__VarRefAssignment_4_1");
			builder.put(grammarAccess.getTerminalAccess().getVarRefAssignment_5_1(), "rule__Terminal__VarRefAssignment_5_1");
			builder.put(grammarAccess.getTerminalAccess().getDimAssignment_5_2(), "rule__Terminal__DimAssignment_5_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private VaselinaGrammarAccess grammarAccess;

	@Override
	protected InternalVaselinaParser createParser() {
		InternalVaselinaParser result = new InternalVaselinaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public VaselinaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(VaselinaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
